(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL) 
(%include "rule/tcell-setrule.sh")

(c-exp "#include <mpi.h>")
(c-exp "#include <stdio.h>")
(c-exp "#include <string.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include <unistd.h>")
(c-exp "#include <stdatomic.h>")
(c-exp "#include <mkl.h>")
(c-exp "#include \"../data/bem_file.h\"")
(c-exp "#include \"../data/filling.h\"")

(%defconstant PL 50)                ;;TN
(%defconstant PB 10)              ;;TN of BCT
(%defconstant Check-interval 100)
(%defconstant LN 1000000)
(%defconstant ND 2)
(%defconstant BCTN 1000000)

(%defconstant TCELL-CHECK-REQ 1)

(extern-decl sv_socket int)

;; ; Sphere 10ts small data for debug
;; (%defconstant INPUT_DEFAULT "../bem_data/input_10ts.txt")
;; ; Sphere 100ts
(%defconstant INPUT_DEFAULT "../bem_data/input_100ts.txt")
;; ; SphereCube 10ts_c30_3_3_4
;; (%defconstant INPUT_DEFAULT "../bem_data/input_10ts_c30_3_3_4.txt")
;; ; SpherePyramid 10ts_p30_4
;; (%defconstant INPUT_DEFAULT "../bem_data/input_10ts_p30_4.txt")
;; ; Humans 216h_5x10
;; (%defconstant INPUT_DEFAULT "../bem_data/input_216h_5x10.txt")
;; ; SpherePyramidPyramid 84tp7_30_2p
;; (%defconstant INPUT_DEFAULT "../bem_data/input_84tp7_30_2p.txt")

(%defconstant NWORKER-MAX 576)
(extern-decl num-thrs unsigned-int)

;; *********define cluster************
(deftype cluster (struct cluster))
;; (def (struct cluster)
;;   (decl nstrt int)
;;   (decl nsize int)
;;   (decl nnson int)
;;   (decl bmin (array double 3))
;;   (decl bmax (array double 3))
;;   (decl zwdth double)
;;   (decl lndsd int)
;;   (decl rndsd int)
;;   (decl offsets (array int 2)))

(deftype leafmtx (struct leafmtx))

(deftype leafmtxp (struct leafmtxp))
(def (struct leafmtxp)
  (decl nlf int)
  (decl nlfkt int))

(def worker-data
  (def n int)
  (def leafnode-list (ptr leafmtx))
  (def lnmtx (array int 3))
  (def nlf int)
  (def elem-sum int)
  (def cas-start int)
  (def cas-counter int))

(def Wdata-list (array (ptr (struct worker-data)) NWORKER-MAX))

(def worker-init
  (= (aref Wdata-list WORKER-ID) (ptr WDATA))
  (= WDATA.n BCTN)
  (= WDATA.leafnode-list (cast (ptr leafmtx) (csym::malloc (* WDATA.n (sizeof leafmtx)))))
  (= (aref WDATA.lnmtx 0) 0)
  (= (aref WDATA.lnmtx 1) 0)
  (= (aref WDATA.lnmtx 2) 0)
  (= WDATA.nlf 0)
  (= WDATA.elem-sum 0)
)

(def (task create_leafmtx)
  (def st-cltl int :in)
  (def st-cltt int :in)
  (def i1 int :in)
  (def i2 int :in))

(def (task start-up)
  (def r int))

(def (task CTdist1)
  (def i1 int :in)
  (def i2 int :in))

(def (task BCT_cnt_task))
(def (task-body BCT_cnt_task))
(def (task-receiver BCT_cnt_task)
  (csym::BCT_cnt)
  ;; (csym::finalize-tcounter)
	;; (csym::show-counters)
)

(def (task CT_cnt_task))
(def (task-body CT_cnt_task))
(def (task-receiver CT_cnt_task)
  (csym::fprintf stderr "#CT_nodes:%d~%" (csym::checkCT 0))
)

(def (task data_load_task))
(def (task-body data_load_task))
(def (task-receiver data_load_task)
  (csym::load_data)
  (= countCT 0)
)

(decl (start-up) (wfn int))
(decl (csym::med3 nl nr nlr2)
    (fn int int int int))
(decl (create_leafmtx stc-cltl st-cltt i1 i2)
    (wfn void int int int int ))
;; (decl (csym::dist-2cluster st-cltl st-cltt)
    ;; (fn double int int))
(decl (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3))))
;; (decl (csym::create-cluster ndpth nstrt nsize nson)
;;     (fn int int int int int))
(decl (csym::free-st-clt st-clt)
    (fn void (ptr cluster)))
;; (decl (csym::create-ctree-ssgeom zgmid face2node ndpth nsrt nd)
;;     (fn int (ptr (array double 3)) (ptr (array int 3)) int int int))
(decl (csym::get-wall-time) (fn double))
(decl (csym::get-cpu-time) (fn double))
(decl (csym::checkClusterTree f st-clt) (fn void (ptr FILE) int))

(decl (csym::BCT_cnt) (fn void void))
(decl (csym::load_data) (fn void void))
(decl (csym::checkCT root) (fn int int))

(decl ndim int 3)
(def privateCTlist (ptr cluster))
;; (def resultCTlist (ptr cluster))
(def nlf long 6500000)
(def nofc int)
(def nNode int)
(def CTcounter int 0)

;; (def zgmid (ptr (array double 3)))
;; (def bgmid (ptr (array double 3)))
;; (def f2n (ptr (array int 3)))

(def (task-body create_leafmtx)
  (create_leafmtx this.st-cltl this.st-cltt this.i1 this.i2))

(def (task-body CTdist1)
  ;; (csym::create-ctree-ssgeom zgmid face2node 0 0 nofc)
  (csym::create-ctree-ssgeom 0 zgmid f2n 0 0 0 nofc nofc 3)
  (= outside-flag 1)
  ;; (= resultCTlist privateCTlist)
)

(def (task-body start-up)
  (= this.r (start-up)))

(def (start-up) (wfn int)
  (csym::fprintf stderr "Input file: %s~%" INPUT_DEFAULT)
  (csym::fprintf stderr "#proc:%d ~%" num-procs)
  (decl start double)
  (decl end double)
  (decl spent double)

  (tcell-broadcast data_load_task (:put) 
    (csym::load_data)
    (= countCT 0)
  )

  (def i int)
  (= start (csym::MPI_Wtime))
  (do-many for i from 0 to num-procs
    ;; (csym::create-ctree-ssgeom zgmid face2node 0 0 nofc)
    (csym::create-ctree-ssgeom 0 zgmid f2n 0 0 0 nofc nofc 3)
    (= outside-flag 1)
    ;; (= resultCTlist privateCTlist)
    ;; (if (and (== my_rank 0))
    ;;   (begin
    ;;     (decl all int)
    ;;     (= all (* (fref (aref resultCTlist 0) nnson) (fref (aref resultCTlist 0) nnson)))
    ;;     ;; (csym::fprintf stderr "my_rank:%d, workerID:%d ~%" my_rank WORKER-ID)
    ;;     (create_leafmtx 0 0 0 all zgmid node face2node)
    ;;   )
    ;; )
    (csym::fprintf stderr "CT count:%d~%" CTcounter)
		(handles CTdist1
      (:spawn-from (- i 1))
      (:node 2)
			(:put from j1 to j2)
			(:get)))
  (= end (csym::MPI_Wtime))
  (= spent (- end start))
  (csym::fprintf stderr "cluster tree time spent:%.10lf~%" spent)
  (def il int)
  ;; (csym::fprintf stderr "#CT=%d~%" countCT)
  ;; (for ((= il 0) (< il nofc) (inc il))
  ;;   (csym::fprintf stderr "#face:%d %f %f %f~%" 
  ;;     il
  ;;     (aref zgmid il 0)
  ;;     (aref zgmid il 1)
  ;;     (aref zgmid il 2)
  ;;   )
  ;; )
  ;; (for ((= il 0) (< il nNode) (inc il))
  ;;   (csym::fprintf stderr "#node:%d %f %f %f~%" 
  ;;     il
  ;;     (aref bgmid il 0)
  ;;     (aref bgmid il 1)
  ;;     (aref bgmid il 2)
  ;;   )
  ;; )
  ;; (for ((= il 0) (< il nofc) (inc il))
  ;;   (csym::fprintf stderr "#face2node:%d %d %d %d~%" 
  ;;     il
  ;;     (aref f2n il 0)
  ;;     (aref f2n il 1)
  ;;     (aref f2n il 2)
  ;;   )
  ;; )
  ;; (for ((= il 0) (< il countCT) (inc il))
  ;;   (csym::fprintf stderr "#CT:%d %f~%" 
  ;;     il
  ;;     (fref (aref resultCTlist il) zwdth)
  ;;   )
  ;; )

  (= start (csym::MPI_Wtime))
  (decl all int)
  (= all (* (fref (aref resultCTlist 0) nnson) (fref (aref resultCTlist 0) nnson)))
  (create_leafmtx 0 0 0 all)
  (= end (csym::MPI_Wtime))
  (= spent (- end start))
  (csym::fprintf stderr "BCT time spent:%.10lf~%" spent)
  
  ;; (tcell-broadcast BCT_cnt_task (:put) 
    (csym::BCT_cnt)
    ;; (csym::finalize-tcounter)
	  ;; (csym::show-counters)
  ;; )

  (return 0))

(def (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)))
  (def tempcluster (ptr cluster))
  (= tempcluster (ptr (aref privateCTlist st-clt)))
  (def id int)
  (def il int)
  (def zeps double 1.0e-5)
  (if (> (fref (mref tempcluster) nnson) 0)
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (mref bls_min) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (mref bls_max) id)))
      (for ((= id 0) (< id ndim) (inc id))
        (if (< (aref (mref brs_min) id) (aref (fref (mref tempcluster) bmin) id))
          (begin
            (= (aref (fref (mref tempcluster) bmin) id) (aref (mref brs_min) id))))
        (if (< (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))
          (begin
            (= (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))))))
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid 0) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid 0) id))
        ()
      )
      (for ((= id 0) (< id ndim) (inc id))
        (for ((= il 1) (< il (fref (mref tempcluster) nsize)) (inc il))
          (if (< (aref (aref zgmid il) id) (aref (fref (mref tempcluster) bmin) id))
            (begin
              (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid il) id))))
          (if (< (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))
            (begin
              (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))))))
    )
  )
  (def zwdth double (* 
                      (- (aref (fref (mref tempcluster) bmax) 0) 
                        (aref (fref (mref tempcluster) bmin) 0)) 
                      (- (aref (fref (mref tempcluster) bmax) 0)
                        (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
       (+ zwdth
          (* (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))
             (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))))))
  (= zwdth (csym::sqrt zwdth))
  (for ((= id 0) (< id ndim) (inc id))
    (def bdiff double
      (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id)))
    (if (< bdiff (* zeps zwdth))
        (begin
          (= (aref (fref (mref tempcluster) bmax) id)
             (+ (aref (fref (mref tempcluster) bmax) id)
                (* 0.5 (- (* zeps zwdth) bdiff))))
          (= (aref (fref (mref tempcluster) bmin) id)
             (- (aref (fref (mref tempcluster) bmin) id)
                (* 0.5 (- (* zeps zwdth) bdiff)))))))
  (= zwdth
     (* (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))
        (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
      (+ zwdth
        (* (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id))
          (- (aref (fref (mref tempcluster) bmax) id)
             (aref (fref (mref tempcluster) bmin) id))))))
  (= (fref (mref tempcluster) zwdth) (csym::sqrt zwdth))
)

(def (csym::med3 nl nr nlr2) (fn int int int int)
  (decl med3 int)
  (if (< nl nr)
      (begin
        (if (< nr nlr2)
            (begin (= med3 nr))
            (if (< nlr2 nl)
                (begin (= med3 nl))
                (begin (= med3 nlr2)))))
      (begin
        (if (< nlr2 nr)
            (begin (= med3 nr))
            (if (< nl nlr2) 
                (begin (= med3 nl))
                (begin (= med3 nlr2))))))
  (return med3))

(def (create_leafmtx st-cltl st-cltt i1 i2)
    (wfn void int int int int)
  (def ndl int (fref (aref resultCTlist st-cltl) nsize))
  (def ndt int (fref (aref resultCTlist st-cltt) nsize))
  (def nstrtl int (fref (aref resultCTlist st-cltl) nstrt))
  (def nstrtt int (fref (aref resultCTlist st-cltt) nstrt))
  (def nnsonl int (fref (aref resultCTlist st-cltl) nnson))
  (def nnsont int (fref (aref resultCTlist st-cltt) nnson))

  (decl ia int)
  (def nleaf double 40.0)
  (def zeta double 2.0)
  (def zdistlt double (csym::dist_2cluster st-cltl st-cltt))
  (if (and (or (<= (fref (aref resultCTlist st-cltl) zwdth) (* zdistlt zeta))
               (<= (fref (aref resultCTlist st-cltt) zwdth) (* zdistlt zeta)))
           (and (>= ndl nleaf) (>= ndt nleaf)))
    (begin
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) kt) 0)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 1)
      (csym::fill_sub_leafmtx (ptr (aref WDATA.leafnode-list WDATA.nlf)) 0.0)
      (+= WDATA.elem-sum (* (+ ndl ndt) (fref (aref WDATA.leafnode-list WDATA.nlf) kt)))
      (= WDATA.nlf (+ WDATA.nlf 1))
      ;; (if (and (and (== nstrtl 0) (== nstrtt 2620)) (and (== ndl 2620) (== ndt 10400)))
      ;;   (csym::exit 99)
      ;; )
    )
    (begin
      (if (or (== nnsonl 0) (== nnsont 0) (<= ndl nleaf) (<= ndt nleaf))
        (begin
	        (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 2)
          (csym::fill_sub_leafmtx (ptr (aref WDATA.leafnode-list WDATA.nlf)) 0.0)
          (+= WDATA.elem-sum (* ndl ndt))
          (= WDATA.nlf (+ WDATA.nlf 1)))
        (begin
          (if (and (> ndl PB) (> ndt PB))
		        (begin
		          (do-many for ia from i1 to i2
                TCELL-CHECK-REQ
		            (decl il int) (decl it int)
		            (= il (/ ia nnsont))
		            (= it (% ia nnsont))
		            (decl al int)
		            (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson) 
                        (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		            (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)
		            (handles create_leafmtx
			            (:put from j1 to j2
                    (= this.st-cltl st-cltl)
			              (= this.st-cltt st-cltt)
			              (= this.i1 j1)
			              (= this.i2 j2))
			            (:get)))
            )
		        (begin
		          (for ((= ia i1) (< ia i2) (inc ia))
		            (decl il int) (decl it int)
		            (= il (/ ia nnsont))
		            (= it (% ia nnsont))
		            (decl al int)
		            (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson)
                        (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		            (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) 
                                (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)))
          )
        )))))

(def (csym::checkCT root) (fn int int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (def left int)
      (def right int)
      (= left (csym::checkCT (aref (fref (mref temp) offsets) 0)))
      (= right (csym::checkCT (aref (fref (mref temp) offsets) 1)))
      (return (+ (+ left right) 1)))
    (begin
      (return 1))))

(def (csym::checkClusterTree f root) (fn void (ptr FILE) int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (def width double (fref (mref temp) zwdth))
  (csym::fprintf f "%lf~%" width)
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 0))
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 1)))))

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))

(def (csym::get-cpu-time) (fn double void)
  (return (/ (cast double (csym::clock)) CLOCKS-PER-SEC)))

(def (csym::BCT_cnt) (fn void void)
  (begin
    (def i int)
    (def j int)
    (def nlf-sum int 0)
    (def memory_sum int 0)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
      (if (> nlf-i BCTN)
        (begin
          (csym::fprintf stderr "nlf of counted by worker %d is larger than BCTN!~%" i)
          (csym::exit 99)))
      (+= nlf-sum nlf-i)
      (+= memory_sum (fref (aref Wdata-list i) -> elem-sum))
      
    )
    (csym::fprintf stderr "rank: %d, elem-sum=%d nlf-sum= %d~%" my-rank memory_sum nlf-sum)
  )
)

(def (csym::load_data) (fn void void)
  (decl fname (ptr char))
  (decl file (ptr FILE))
  (def countOfNode int 0)
  (def count int 0)
  (decl i int)
  ;; (def coordOfNode (ptr (array double 3)))
  ;; (def coordOfFace (ptr (array double 3)))
  ;; (def face2node (ptr (array int 3)))
  (def bi (struct bem-input))
  (= fname INPUT-DEFAULT)
  (= file (fopen fname "r"))
  (if (== file NULL)
    (begin
      (csym::fprintf stderr "Error: Unable to input file '%s'!~%" fname)
      (csym::exit 99))
    (begin
      (if (== (csym::read-bem-input file (ptr bi) BI-AUTO) -1)
	      (begin
	        (csym::fprintf stderr "Bem input file read error!~%")
	        (csym::exit 99)))
      (csym::print-bem-input stderr (ptr bi) BI-PRETTY)
      (= countOfNode bi.nNode)
      (= bgmid bi.coordOfNode)
      (= count bi.nFace)
      (= zgmid bi.coordOfFace)
      (= f2n bi.face2node)))
  (csym::fclose file)

  (= nofc count)
  (= nNode countOfNode)
  (= privateCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
  (= resultCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
)
