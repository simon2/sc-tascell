(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL) 
(%include "rule/tcell-setrule.sh")

(c-exp "#include <mpi.h>")
(c-exp "#include <stdio.h>")
(c-exp "#include <stdlib.h>")
;;(c-exp "#include <stddef.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include <unistd.h>")
(c-exp "#include <stdatomic.h>")
(c-exp "#include <pthread.h>")
(c-exp "#include \"../data/bem_file.h\"")
;;(c-exp "#include \"sock.h\"")
(%defconstant PN 10000)             ;;TS
(%defconstant PL 10)                ;;TN
(%defconstant PARA_LEVEL 20)
(%defconstant CHUNK_SIZE 128)      ;;C
(%defconstant Check-interval 100)
(%defconstant MB 50000000)
(%defconstant LN 15000000)

(%defconstant TCELL-CHECK-REQ 1)

(extern-decl sv_socket int)

;; ; Spherecube
;;(%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt_cb_1.5_10_10_10.bin")
;; ; Spherepyramid
;;(%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt_pb_1.5_14.bin")
;; ; Sphere
;;(%defconstant INPUT_DEFAULT "../data_pro1804/input_50ms.bin")
;; ; humanoids
(%defconstant INPUT_DEFAULT "../data_pro1804/input_human_1x1.txt_cb_0.3_50_100_1.bin")
;; ; small dataset for debug, N=1000
;(%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt.bin")

(%defconstant NWORKER-MAX 540)
(extern-decl num-thrs unsigned-int)

;; *********define cluster************
(deftype cluster (struct cluster))
(def (struct cluster)
  (decl ndim int)
  (decl nstrt int)
  (decl nsize int)
  (decl ndpth int)
  (decl nnson int)
  (decl nmbr int)
  (decl ndscd int)
  (decl bmin (array double 3))
  (decl bmax (array double 3))
  (decl zwdth double)
  (decl left_son_node int)
  (decl right_son_node int)
  (decl offsets (array int 2))
)

(deftype leafmtx (struct leafmtx))
(def (struct leafmtx)
  (decl ltmtx int)
  (decl kt int)
  (decl nstrtl int)
  (decl ndl int)
  (decl nstrtt int)
  (decl ndt int)
  (decl a1 (ptr double))
  (decl a2 (ptr double))
)

(deftype leafmtxp (struct leafmtxp))
(def (struct leafmtxp)
  (decl nlf int)
  (decl nlfkt int)
)

(def worker-data
  (def n int)
  (def leafnode-list (ptr leafmtx))
  (def lnmtx (array int 3))
  (def nlf int)
)

;; Pointer to WDATA of i-th worker
(def Wdata-list (array (ptr (struct worker-data)) NWORKER-MAX))

(def worker-init
  (= (aref Wdata-list WORKER-ID) (ptr WDATA))
  (= WDATA.n 1599448480)
  ;; Do malloc() after CT construction
  (= WDATA.leafnode-list (cast (ptr leafmtx) (csym::malloc (* WDATA.n (sizeof leafmtx)))))
  (= (aref WDATA.lnmtx 0) 0)
  (= (aref WDATA.lnmtx 1) 0)
  (= (aref WDATA.lnmtx 2) 0)
  (= WDATA.nlf 0)
)

(def (task create_leafmtx)
  (def st-cltl int :in)
  (def st-cltt int :in)
  (def i1 int :in)
  (def i2 int :in)
)

(def (task start-up)
  (def r int)
)

(def (task build-cluster)
  (def zgmid (ptr (array double 3)))
  (def tempzgmid (ptr (array double 3)))
  (def ndpth int :in)
  (def ndscd int :in)
  (def nsrt int :in)
  (def nd int :in)
  (def md int :in)
  (def nclst int :in)
  (def ndim int :in)
  (def r int :out)
  (def rank int :out)
  (decl bmin (array double 3))
  (decl bmax (array double 3))
)

(def (task-sender build-cluster)
  (if (> 0 this.nd) (return))
  (csym::send-doubles (cast (ptr double) this.zgmid) (* this.nd 3))
  ;;(csym::send-doubles (cast (ptr double) this.tempzgmid) (* this.nd 3))
)

(def (task-receiver build-cluster)
  (if (== flag 0)
    (begin 
      (= privateCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
      (= resultCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
      (= zgmid (cast (ptr (array double 3)) (csym::malloc (* (sizeof double) (* this.md 3)))))
      (= tempzgmid (cast (ptr (array double 3)) (csym::malloc (* (sizeof double) (* this.md 3)))))
      (def comm_size int)
      (def my_rank int)
      (csym::MPI_Comm_size MPI_COMM_WORLD (ptr comm_size))
      (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
      (= length_list (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
      (= length_list_BYTE (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
      ;;add MPI_Allgather() for all nodes exept rank0 here by using pthread.
      (if (not (== my_rank 0))
        (begin 
          (pthread_create (ptr mpi_thread) NULL my-allgather NULL)
        )
      )
      (= flag 1)
    )
  )
  (if (not (> 0 this.nd))
    (begin
      (= this.zgmid (ptr (aref zgmid this.nsrt)))
      (= this.tempzgmid (ptr (aref tempzgmid this.nsrt)))
      (csym::recv-doubles (cast (ptr double) this.zgmid) (* this.nd 3))
      ;;(csym::recv-doubles (cast (ptr double) this.tempzgmid) (* this.nd 3))
    )
  )
)

#|(def (task-sender create_leafmtx)
  (csym::send_int nlf)
)

(def (task-receiver create_leafmtx)
  (= nlf (csym::recv_int))
  (if (== flagBCT 0)
    (begin
      (def i int)
      (def nlf-for-each-worker int (* (/ (cast long nlf) num-thrs) 10))
      (csym::fprintf stderr "rank 1 nlf-for-each-worker: %ld num-thrs: %ld ~%" nlf-for-each-worker num-thrs)
      ;;(def sz size-t (* nlf-for-each-worker (cast long num-thrs)))
      (for ((= i 0) (< i num-thrs) (inc i))
        (= (fref (aref Wdata-list i) -> leafnode-list)
           (cast (ptr leafmtx) (csym::malloc (* (sizeof leafmtx) nlf-for-each-worker))))
        (if (not (fref (aref Wdata-list i) -> leafnode-list))
          (begin
            (csym::fprintf stderr "rank 1 malloc temp-leafmtx for worker %d error!~%" i)
            (csym::exit 99))))
      (= flagBCT 1)
    )
  )
)|#

(def (rslt-sender build-cluster)
  (csym::send-doubles (cast (ptr double) (fref (aref privateCTlist this.r) bmax)) 3)
  (csym::send-doubles (cast (ptr double) (fref (aref privateCTlist this.r) bmin)) 3)
)

(def (rslt-receiver build-cluster)
  (csym::recv-doubles (cast (ptr double) this.bmax) 3)
  (csym::recv-doubles (cast (ptr double) this.bmin) 3)
)

(def (rslt-sender create_leafmtx)
  (def my_rank int)
  (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
  (begin
    (def nlf-sum int 0)
    (def i int)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
      ;;(csym::fprintf stderr "nlf(%d) = %d~%" i nlf-i)
      ;;(if (> nlf-i nlf-for-each-worker)
      ;;    (begin
      ;;      (csym::fprintf stderr "nlf of counted by worker %d is larger than nlf-for-each-worker!~%" i)
      ;;      (csym::exit 99)))
       (+= nlf-sum nlf-i))
    (csym::fprintf stderr "rankid %d nlf-sum = %d~%" my_rank nlf-sum))
  ;;(csym::fprintf stderr "rankid %d thread 0; nlf %d!~%" my_rank (fref (aref Wdata-list 0) -> nlf))
)

(def (rslt-receiver create_leafmtx)

)

(def (task minmax)
  (def i1 int :in)
  (def i2 int :in)
  (def nsrt int :in)
  (def zgmid (ptr (array double 3)) :in)
  (def ndim int :in)
  (def ndpth int :in)
  (def minx double)
  (def maxx double)
  (def miny double)
  (def maxy double)
  (def minz double)
  (def maxz double)
)

(def (task countNum)
  (def i1 int :in)
  (def i2 int :in)
  (def zgmid (ptr (array double 3)) :in)
  (def nd int :in)
  (def ncut int :in)
  (def zlmid double :in)
  (def gn int :in)
  (def lessNum (ptr int) :in)
  (def moreNum (ptr int) :in)
  (def ndpth int :in)
  (def nsrt int :in)
)

(def (task setStart)
  (def i1 int :in)
  (def i2 int :in)
  (def nd int :in)
  (def ncut int :in)
  (def gn int :in)
  (def nsrt int :in)
  (def zlmid double :in)
  (def zgmid (ptr (array double 3)) :in)
  (def tempzgmid (ptr (array double 3)) :in)
  (def lessNum (ptr int) :in)
  (def moreNum (ptr int) :in)
  (def lessStart (ptr int) :in)
  (def moreStart (ptr int) :in)
  (def ndpth int :in)
)

(def (task ssum)
  (def i1 int :in)
  (def i2 int :in)
  (def lessNum (ptr int) :in)
  (def ndpth int :in)
  (def sum int)
)

(decl (start-up) (wfn int))
(decl (supermatrix-construction-cog-leafmtrx st-leafmtxp zgmid param lod lnmtx nofc nffc ndim)
    (wfn void (ptr leafmtxp) (ptr (array double 3)) (array double) (ptr int) (ptr int) int int int))
(decl (csym::med3 nl nr nlr2)
    (fn int int int int))
(decl (create_leafmtx stc-cltl st-cltt i1 i2)
    (wfn void int int int int))
(decl (csym::dist-2cluster st-cltl st-cltt)
    (fn double int int))
(decl (csym::count-lntmx st-cltl st-cltt lnmtx nffc)
    (fn void int int (array double) (ptr int) int))
(decl (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max ndim)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) int))
(decl (csym::create-cluster  nmbr ndpth nstrt nsize ndim nson)
    (fn int int int int int int int))
(decl (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt nd md nclst)
    (wfn int (ptr (array double 3)) (ptr (array double 3)) int int int int int int))
(decl (csym::get-wall-time) (fn double))
(decl (csym::get-cpu-time) (fn double))
(decl (csym::checkCT root) (fn int int))
(decl (csym::checkClusterTree f st-clt) (fn void (ptr FILE) int))
(decl (minmax i1 i2 zgmid tsk ndpth nsrt) (wfn void int int (ptr (array double 3)) (ptr (struct minmax)) int int))
(decl (countNum i1 i2 lessNum moreNum zgmid nd ncut glmid gn ndpth nsrt) (wfn void int int (ptr int) (ptr int) (ptr (array double 3)) int int double int int int))
(decl (setStart i1 i2 ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid ndpth nsrt)
    (wfn void int int int int int double (ptr int) (ptr int) (ptr int) (ptr int) (ptr (array double 3)) (ptr (array double 3)) int int))
(decl (ssum i1 i2 ndpth lessNum) (wfn int int int int (ptr int)))
(decl (csym::my-malloc) (fn int void))

(decl depth-max int)
(decl count-node int)
(decl param (array double 100))
(decl nffc int)
(decl nff (array int 100))
(decl ndim int)
(def flag int 0)
(def privateCTlist (ptr cluster))
(def resultCTlist (ptr cluster))
(def countPCT (atomic_int) (ATOMIC_VAR_INIT 0))
(def length_list (ptr int))
(def length_list_BYTE (ptr int))
(def mpi_thread pthread_t)
(def pre (ptr int))
(def pre_BYTE (ptr int))
(def total_length int)
(def flagBCT int 0)
(def nlf int)

(def zgmid (ptr (array double 3)))
(def tempzgmid (ptr (array double 3)))

(def (task-body create_leafmtx)
  (create_leafmtx this.st-cltl this.st-cltt this.i1 this.i2)
)

(def (task-body start-up)
  (= this.r (start-up))
)

(def (task-body build-cluster)
  (= this.r (create-ctree-ssgeom this.zgmid this.tempzgmid this.ndpth 
				 this.ndscd this.nsrt this.nd this.md this.nclst))
  (def my_rank int)
  (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
  (= this.rank my_rank)
)

(def (task-body minmax)
  ;;(csym::fprintf stderr "minmax~%")
  (minmax this.i1 this.i2 this.zgmid (ptr this) this.ndpth this.nsrt))

(def (task-body countNum)
  ;;(csym::fprintf stderr "countNum~%")
  ;;(csym::fprintf stderr "countNum: %f %d %d %d %d~%" (csym::get-wall-time) WORKER-ID this.i1 this.i2 this.ndpth)
  (countNum this.i1 this.i2 this.lessNum this.moreNum this.zgmid
	    this.nd this.ncut this.zlmid this.gn this.ndpth this.nsrt))

(def (task-body setStart)
  ;;(csym::fprintf stderr "setStart~%")
  ;;(csym::fprintf stderr "setStart: %f %d %d %d %d~%" (csym::get-wall-time) WORKER-ID this.i1 this.i2 this.ndpth)
  (setStart this.i1 this.i2 this.ncut this.gn this.nd this.zlmid this.lessNum this.moreNum
	    this.lessStart this.moreStart this.zgmid this.tempzgmid this.ndpth this.nsrt))

(def (task-body ssum)
  ;;(csym::fprintf stderr "ssum~%")
  (= this.sum (ssum this.i1 this.i2 this.ndpth this.lessNum))
)

(def (start-up) (wfn int)
  (decl fname (ptr char))
  (decl file (ptr FILE))
  (def countOfNode int 0)
  (def count int 0)
  (decl i int)
  (def bi (struct bem-input))
  (decl coordOfNode (ptr (array double 3)))
  ;;(decl coordOfFace (ptr (array double 3)))
  (= fname INPUT-DEFAULT)
  (= file (fopen fname "r"))
  (if (== file NULL)
    (begin
      (csym::fprintf stderr "Error: Unable to input file '%s'!~%" fname)
      (csym::exit 99)
    )
    (begin
      (csym::fprintf stderr "Input file: %s~%" INPUT_DEFAULT)
      (if (== (csym::read-bem-input file (ptr bi) BI-AUTO) -1)
	      (begin
	        (csym::fprintf stderr "Bem input file read error!~%")
	        (csym::exit 99)
        )
      )
      (csym::print-bem-input stderr (ptr bi) BI-PRETTY)
      (= countOfNode bi.nNode)
      (= coordOfNode bi.coordOfNode)
      (= count bi.nFace)
      (= zgmid bi.coordOfFace)
    )
  )
  (csym::fclose file)
  (csym::free coordOfNode)
  (for ((= i 0) (< i 100) (inc i))
    (= (aref param i) 0.0)
    (= (aref nff i) 0)
  )
  (= (aref param 21) 10.0)
  (= (aref param 31) 1.1)
  (= (aref param 41) 15.0)
  (= (aref param 51) 2.0)
  (decl st-leafmtxp (ptr leafmtxp))
  (decl lod (ptr int))
  (decl lnmtx (ptr int))
  (def nofc int count)
  (= nffc 1)
  ;;(def ndim int 3)
  (= ndim 3)
  (= lnmtx (cast (ptr int) (csym::malloc (* 3 (sizeof int)))))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref lnmtx i) 0)
  )
  (= st-leafmtxp (cast (ptr leafmtxp) (csym::malloc (sizeof leafmtxp))))
  (= lod (cast (ptr int) (csym::malloc (* nofc (sizeof int)))))
  (for ((= i 0) (< i nofc) (inc i))
    (= (aref lod i) 0)
  )
  (supermatrix-construction-cog-leafmtrx st-leafmtxp zgmid param lod lnmtx nofc nffc ndim)
  (return 0)
)

(def (supermatrix-construction-cog-leafmtrx st-leafmtxp zgmid param lod lnmtx nofc nffc ndim)
    (wfn void (ptr leafmtxp) (ptr (array double 3)) (array double) (ptr int) (ptr int) int int int)
  (def st-clt int)
  (decl i int)
  (decl nfl int)
  (decl nflkt int)
  (decl ip int) 
  (decl il int)
  (decl ig int)
  (def nd int (* nofc nffc))
  (decl lodfc (ptr int))
  (decl st-leafmtx (ptr leafmtx))
  (= lodfc (cast (ptr int) (csym::malloc (* nofc (sizeof int)))))
  (for ((= il 0) (< il nofc) (inc il))
    (= (aref lodfc il) il)
  )
  (def nsrt int 0)
  (def ndf int nofc)
  (def nclst int 0)
  (def ndpth int 0)
  (def ndscd int 0)
  (= depth-max 0)
  (= count-node 0)
  (decl start double)
  (decl end double)
  (decl spent double)

  (if (== flag 0)
    (begin
      (= privateCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
      (= resultCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
      (= tempzgmid (cast (ptr (array double 3)) (csym::malloc (* (* nofc 3) (sizeof double)))))
      (def comm_size int)
      (csym::MPI_Comm_size MPI_COMM_WORLD (ptr comm_size))
      (= length_list (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
      (= length_list_BYTE (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
      (= flag 1)
    )
  )

  (= start (csym::get-wall-time))
  (= st-clt (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt ndf nofc nclst))
  (= end (csym::get-wall-time))
  (= spent (- end start))
  ;;(csym::sleep 10)
  
  (csym::fprintf stderr "cluster tree time spent:%.10lf~%" spent)
  ;;(def testmalloc (ptr int))
  ;;(= testmalloc (csym::malloc (sizeof leafmtx)))
  ;;(csym::fprintf stderr "malloc-2 success~%")

  ;;(csym::fprintf stderr "node0: countCT=%d~%" (atomic_load (ptr countPCT)))
  ;;================ MPI code ======================
  (= start (csym::get-wall-time))
  (def comm_size int)
  (def my_rank int)
  (csym::MPI_Comm_size MPI_COMM_WORLD (ptr comm_size))
  (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
  (csym::MPI_Barrier MPI_COMM_WORLD)
  (def countR int)
  (= countR (atomic_load (ptr countPCT)))
  (csym::fprintf stderr "rankid %d: countR is %d!~%" my_rank countR)
  (csym::MPI_Allgather (ptr countR) 1 MPI_INT length_list comm_size MPI_INT MPI_COMM_WORLD)
  
  (def testmalloc (ptr int))
  (= testmalloc (csym::malloc (sizeof leafmtx)))
  (csym::fprintf stderr "malloc-1 success~%")
  
  ;;prefix-sum
  (= pre (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
  (= pre_BYTE (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
  (= (aref pre 0) 0)
  (for ((= il 0) (< il comm_size) (inc il))
    (= (aref pre (+ il 1)) (+ (aref pre il) (aref length_list il)))
  )
  (for ((= il 0) (< il comm_size) (inc il))
    (= (aref length_list_BYTE il) (* (aref length_list il) (sizeof cluster)))
    (= (aref pre_BYTE il) (* (aref pre il) (sizeof cluster)))
  )
  (= total_length (+ (aref pre (- comm_size 1)) (aref length_list (- comm_size 1))))
  ;;(csym::fprintf stderr "rankid %d: total is %d!~%" my_rank total_length)
  (csym::fprintf stderr "total_length is %d!~%" total_length)
  
  (for ((= il 0) (< il countR) (inc il))
    (if (== (fref (aref privateCTlist il) left_son_node) -1)
      (begin
        (= (aref (fref (aref privateCTlist il) offsets) 0) (+ (aref (fref (aref privateCTlist il) offsets) 0) (aref pre my_rank)))
      )
      (begin
        (= (aref (fref (aref privateCTlist il) offsets) 0) (+ (aref (fref (aref privateCTlist il) offsets) 0) (aref pre (fref (aref privateCTlist il) left_son_node))))
      )
    )
    (if (== (fref (aref privateCTlist il) right_son_node) -1)
      (begin
        (= (aref (fref (aref privateCTlist il) offsets) 1) (+ (aref (fref (aref privateCTlist il) offsets) 1) (aref pre my_rank)))
      )
      (begin
        ;;(csym::fprintf stderr "rank0: inter-node offset happened right at il:%d~%" il)
        (= (aref (fref (aref privateCTlist il) offsets) 1) (+ (aref (fref (aref privateCTlist il) offsets) 1) (aref pre (fref (aref privateCTlist il) right_son_node))))
      )
    )
  )

  ;;(def testmalloc (ptr int))
  ;;(= testmalloc (csym::malloc (sizeof leafmtx)))
  ;;(csym::fprintf stderr "malloc0 success~%")

  ;;MPI_Allgatherv begin
  (csym::MPI_Barrier MPI_COMM_WORLD)
  (def bytelength size-t)
  (= bytelength (- (cast (ptr char) (ptr (aref privateCTlist countR))) (cast (ptr char) (ptr (aref privateCTlist 0)))))
  (csym::fprintf stderr "bytelength:%ld %ld~%" bytelength (* countR (sizeof cluster)))
  (csym::MPI_Allgatherv (ptr (aref privateCTlist 0)) (* countR (sizeof cluster)) MPI_BYTE (ptr (aref resultCTlist 0)) length_list_BYTE pre_BYTE MPI_BYTE MPI_COMM_WORLD)
  (free privateCTlist)
  (free length_list)
  (free length_list_BYTE)
  (= end (csym::get-wall-time))
  (= spent (- end start))
  ;;(csym::sleep 10)
  
  (csym::fprintf stderr "MPI time spent:%.10lf~%" spent)
  ;;================ End MPI code ==================
  ;;(decl f (ptr FILE))
  ;;(= f (csym::fopen "hmat_dist.txt" "w"))
  (csym::fprintf stderr "checkCT:%ld~%" (csym::checkCT st-clt))
  ;;(csym::fprintf stderr "st-clt:%ld~%" st-clt)
  ;;(checkClusterTree f st-clt)
  ;;(csym::fclose f)

  ;;(def testmalloc (ptr int))
  ;;(= testmalloc (csym::malloc (sizeof leafmtx)))
  ;;(csym::fprintf stderr "malloc1 success~%")
  
  (= ndpth 0)
  (csym::fprintf stderr "st-clt:%ld~%" st-clt)
  (= start (csym::get-wall-time))
  (csym::count-lntmx st-clt st-clt param lnmtx nffc)
  (= end (csym::get-wall-time))
  (= spent (- end start))
  (csym::fprintf stderr "count time:%.10lf~%" spent)

  ;;(def testmalloc2 (ptr int))
  ;;(= testmalloc2 (csym::malloc (sizeof leafmtx)))
  ;;(csym::fprintf stderr "malloc2 success~%")

  ;;(= (fref (mref st-leafmtxp) nlfkt) (aref lnmtx 0))
  (= nlf (+ (aref lnmtx 0) (aref lnmtx 1)))
  ;;(= st-leafmtx (cast (ptr leafmtx) (csym::malloc (* nlf (sizeof leafmtx)))))
  ;;(= (fref (mref st-leafmtxp) nlf) nlf)
  (csym::fprintf stderr "nlf: %ld~%" nlf)
  
  (def nlf-for-each-worker int (* (/ (cast long nlf) num-thrs) 10))
  (csym::fprintf stderr "nlf-for-each-worker: %ld num-thrs: %ld ~%" nlf-for-each-worker num-thrs)
  #|(if (== flagBCT 0)
    (begin
      ;;(def sz size-t (* nlf-for-each-worker (cast long num-thrs)))
      ;;(csym::fprintf stderr "sz: %ld~%" sz)
      (for ((= i 0) (< i num-thrs) (inc i))
        ;;(csym::fprintf stderr "test1 i %ld~%" i)
        (= (fref (aref Wdata-list i) -> leafnode-list)
           (cast (ptr leafmtx) (csym::malloc (* (sizeof leafmtx) nlf-for-each-worker))))
        ;;(csym::fprintf stderr "test2 i %ld~%" i)
        ;;(csym::sleep 5)
        (if (not (fref (aref Wdata-list i) -> leafnode-list))
          (begin
            (csym::fprintf stderr "malloc temp-leafmtx for worker %d error!~%" i)
            (csym::exit 99))))
      (= flagBCT 1)
    )
  )|#
  (= nlf 0)

  ;;(def testmalloc3 (ptr int))
  ;;(= testmalloc3 (csym::malloc (sizeof leafmtx)))
  ;;(csym::fprintf stderr "malloc3 success~%")
  
  (decl all int)
  (csym::fprintf stderr "st-clt: %ld~%" st-clt)
  (= all (* (fref (aref resultCTlist st-clt) nnson) (fref (aref resultCTlist st-clt) nnson)))
  (csym::fprintf stderr "all:%ld~%" all)
  (csym::fprintf stderr "st-clt:%ld~%" st-clt)
  (= start (csym::get-wall-time))
  (create_leafmtx st-clt st-clt 0 all)
  (= end (csym::get-wall-time))
  (= spent (- end start))
  
  (def nncon int 0)
  (for ((= i 0) (< i 100) (inc i))
    (= nncon (+ (aref nff i) nncon)))
  ;;(csym::fprintf stderr "nlf:%ld~%" WDATA.nlf)
  (begin
    (def nlf-sum int 0)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
      (csym::fprintf stderr "nlf(%d) = %d~%" i nlf-i)
      (if (> nlf-i nlf-for-each-worker)
          (begin
            (csym::fprintf stderr "nlf of counted by worker %d is larger than nlf-for-each-worker!~%" i)
            (csym::exit 99)))
       (+= nlf-sum nlf-i))
    (csym::fprintf stderr "nlf-sum = %d~%" nlf-sum))
  
  (csym::fprintf stderr "nlf:%ld~%" nncon)
  (csym::fprintf stderr "block cluster tree time spent:%.10lf~%" spent)
  ;;(csym::fprintf stderr "depth_max:%ld  count_:node%ld~%" depth-max count-node)
)

(def (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max ndim)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) int)
  (def tempcluster (ptr cluster))
  (= tempcluster (ptr (aref privateCTlist st-clt)))
  (def id int)
  (def il int)
  (def zeps double 1.0e-5)
  (if (> (fref (mref tempcluster) nnson) 0)
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (mref bls_min) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (mref bls_max) id))
      )
      (for ((= id 0) (< id ndim) (inc id))
        (if (< (aref (mref brs_min) id) (aref (fref (mref tempcluster) bmin) id))
          (begin
            (= (aref (fref (mref tempcluster) bmin) id) (aref (mref brs_min) id))
          )
        )
        (if (< (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))
          (begin
            (= (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))
          )
        )
      )
    )
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid 0) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid 0) id))
      )
      (for ((= id 0) (< id ndim) (inc id))
        (for ((= il 1) (< il (fref (mref tempcluster) nsize)) (inc il))
          (if (< (aref (aref zgmid il) id) (aref (fref (mref tempcluster) bmin) id))
            (begin
              (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid il) id))
            )
          )
          (if (< (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))
            (begin
              (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))
            )
          )
        )
      )
    )
  )
  (def zwdth double (* 
                      (- 
                        (aref (fref (mref tempcluster) bmax) 0) 
                        (aref (fref (mref tempcluster) bmin) 0)) 
                      (- (aref (fref (mref tempcluster) bmax) 0)
                        (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
       (+ zwdth
          (* (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))
             (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id)))))
  )
  (= zwdth (csym::sqrt zwdth))
  (for ((= id 0) (< id ndim) (inc id))
    (def bdiff double
      (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id)))
    (if (< bdiff (* zeps zwdth))
        (begin
          (= (aref (fref (mref tempcluster) bmax) id)
             (+ (aref (fref (mref tempcluster) bmax) id)
                (* 0.5 (- (* zeps zwdth) bdiff))))
          (= (aref (fref (mref tempcluster) bmin) id)
             (- (aref (fref (mref tempcluster) bmin) id)
                (* 0.5 (- (* zeps zwdth) bdiff)))))))
  (= zwdth
     (* (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))
        (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
       (* (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id))
          (- (aref (fref (mref tempcluster) bmax) id)
             (aref (fref (mref tempcluster) bmin) id)))))
  (= (fref (mref tempcluster) zwdth) (csym::sqrt zwdth))
)

(def (csym::med3 nl nr nlr2) (fn int int int int)
  (decl med3 int)
  (if (< nl nr)
      (begin
        (if (< nr nlr2)
            (begin (= med3 nr))
            (if (< nlr2 nl)
                (begin (= med3 nl))
                (begin (= med3 nlr2)))))
      (begin
        (if (< nlr2 nr)
            (begin (= med3 nr))
            (if (< nl nlr2) 
                (begin (= med3 nl))
                (begin (= med3 nlr2))))))
  (return med3))

(def (create_leafmtx st-cltl st-cltt i1 i2)
    (wfn void int int int int)
  (def nffc int 1)
  (def ndl int (* (fref (aref resultCTlist st-cltl) nsize) nffc))
  (def ndt int (* (fref (aref resultCTlist st-cltt) nsize) nffc))
  (def nstrtl int (fref (aref resultCTlist st-cltl) nstrt))
  (def nstrtt int (fref (aref resultCTlist st-cltt) nstrt))
  (def nnsonl int (fref (aref resultCTlist st-cltl) nnson))
  (def nnsont int (fref (aref resultCTlist st-cltt) nnson))
  (def ndpth int (fref (aref resultCTlist st-cltt) ndpth))
  (decl ia int)
  (def nleaf double 15.0)
  (def zeta double 2.0)
  (def zdistlt double (csym::dist-2cluster st-cltl st-cltt))
  ;;(csym::fprintf stderr "zdistlt:%lf~%" zdistlt)
  (if (and (or (<= (* (fref (aref resultCTlist st-cltl) zwdth) zeta) zdistlt)
               (<= (* (fref (aref resultCTlist st-cltt) zwdth) zeta) zdistlt))
           (and (>= ndl nleaf) (>= ndt nleaf)))
      (begin
        (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
        (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
        (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
        (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
        (= (fref (aref WDATA.leafnode-list WDATA.nlf) kt) 0)
        (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 1)
        (= WDATA.nlf (+ WDATA.nlf 1))
	)
      (begin
        (if (or (== nnsonl 0) (== nnsont 0) (<= ndl nleaf) (<= ndt nleaf))
            (begin
	      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
              (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
              (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
              (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
              (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 2)
              (= WDATA.nlf (+ WDATA.nlf 1))
	      )
            (begin
	      (if (< ndpth PARA_LEVEL)
		  (begin
		    (do-many for ia from i1 to i2
		      (decl il int) (decl it int)
		      (= il (/ ia nnsont))
		      (= it (% ia nnsont))
		      (decl al int)
		      (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson) 
                   (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		      (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)
		      (handles create_leafmtx
			(:put from j1 to j2
			      (= this.st-cltl st-cltl)
			      (= this.st-cltt st-cltt)
			      (= this.i1 j1)
			      (= this.i2 j2)
            ;;(csym::fprintf stderr "%d %d %d %d~%" this.st-cltl this.st-cltt this.i1 this.i2)
            )
			(:get)))
		    )
		(begin
		  (for ((= ia i1) (< ia i2) (inc ia))
		    (decl il int) (decl it int)
		    (= il (/ ia nnsont))
		    (= it (% ia nnsont))
		    (decl al int)
		    (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson) (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		    (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)
		    )
		  )
		)
	)))))

(def (csym::dist-2cluster st-cltl st-cltt) (fn double int int)
 (def zs double 0.0) (decl id int)
 (def temp1 (ptr cluster))
 (def temp2 (ptr cluster))
 (= temp1 (ptr (aref resultCTlist st-cltl)))
 (= temp2 (ptr (aref resultCTlist st-cltt)))
 (for ((= id 0) (< id (fref (mref temp1) ndim)) (inc id))
   (if (< (aref (fref (mref temp1) bmax) id) (aref (fref (mref temp2) bmin) id))
       (begin
         (= zs
            (+ zs
               (* (- (aref (fref (mref temp2) bmin) id)
                     (aref (fref (mref temp1) bmax) id))
                  (- (aref (fref (mref temp2) bmin) id)
                     (aref (fref (mref temp1) bmax) id))))))
       (if (< (aref (fref (mref temp2) bmax) id)
              (aref (fref (mref temp1) bmin) id))
           (begin
             (= zs
                (+ zs
                   (* (- (aref (fref (mref temp1) bmin) id)
                         (aref (fref (mref temp2) bmax) id))
                      (- (aref (fref (mref temp1) bmin) id)
                         (aref (fref (mref temp2) bmax) id)))))))))
 (return (sqrt zs)))

(def (csym::count-lntmx st-cltl st-cltt param lnmtx nffc)
    (fn void int int (array double) (ptr int) int)
  (decl il int)
  (decl it int)
  (def temp1 (ptr cluster))
  (def temp2 (ptr cluster))
  (= temp1 (ptr (aref resultCTlist st-cltl)))
  (= temp2 (ptr (aref resultCTlist st-cltt)))
  (def ndl int (* (fref (mref temp1) nsize) nffc))
  (def ndt int (* (fref (mref temp2) nsize) nffc))
  (def nstrtl int (fref (mref temp1) nstrt))
  (def nstrtt int (fref (mref temp2) nstrt))
  (def nnsonl int (fref (mref temp1) nnson))
  (def nnsont int (fref (mref temp2) nnson))
  (def nleaf double (aref param 41))
  (def zeta double (aref param 51))
  (def zdistlt double (dist-2cluster st-cltl st-cltt))
  (if (and (or (<= (* (fref (mref temp1) zwdth) zeta) zdistlt)
               (<= (* (fref (mref temp2) zwdth) zeta) zdistlt))
           (and (>= ndl nleaf) (>= ndt nleaf)))
      (begin
        (= (aref lnmtx 0) (+ (aref lnmtx 0) 1)))
      (begin
        (if (or (== nnsonl 0) (== nnsont 0) (<= ndl nleaf) (<= ndt nleaf))
            (begin
              (= (aref lnmtx 1) (+ (aref lnmtx 1) 1)))
            (begin
              (= (aref lnmtx 2) (+ (aref lnmtx 2) 1))
              (for ((= il 0) (< il nnsonl) (inc il))
                (for ((= it 0) (< it nnsont) (inc it))
                  ;;(csym::fprintf stderr "offsets: %ld %ld ~%" (aref (fref (mref temp1) offsets) il) (aref (fref (mref temp2) offsets) it))
                  (csym::count-lntmx (aref (fref (mref temp1) offsets) il)
                               (aref (fref (mref temp2) offsets) it) param lnmtx nffc)
                )))))))

(def (csym::checkCT root) (fn int int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (def left int)
      (def right int)
      (= left (csym::checkCT (aref (fref (mref temp) offsets) 0)))
      (= right (csym::checkCT (aref (fref (mref temp) offsets) 1)))
      (return (+ (+ left right) 1))
    )
    (begin
      (return 1)
    )
  )
)

(def (csym::checkClusterTree f root) (fn void (ptr FILE) int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (def width double (fref (mref temp) zwdth))
  (csym::fprintf f "%lf~%" width)
  (if (== (fref (mref temp) nnson) 2)
    (begin
      ;;(csym::fprintf f "%lf~%" width)
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 0))
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 1))
    )
    (begin
      ;;(csym::fprintf f "%lf~%" width)
    )
  )
)

(def (csym::create-cluster nmbr ndpth nstrt nsize ndim nson)
    (fn int int int int int int int)
  (decl st-clt (ptr cluster))
  (def pos int (csym::my-malloc))
  (= st-clt (ptr (aref privateCTlist pos)))
  (= nmbr (+ nmbr 1))
  (= (fref (mref st-clt) nstrt) nstrt)
  (= (fref (mref st-clt) nsize) nsize)
  (= (fref (mref st-clt) ndim) ndim)
  (= (fref (mref st-clt) nnson) nson)
  (= (fref (mref st-clt) nmbr) nmbr)
  (= (fref (mref st-clt) ndpth) ndpth)
  (= (fref (mref st-clt) left_son_node) -1)
  (= (fref (mref st-clt) right_son_node) -1)
  (return pos)
)

(def (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt nd md nclst)
    (wfn int (ptr (array double 3)) (ptr (array double 3)) int int int int int int)
  (decl i int)
  (decl id int)
  (decl il int)
  (decl nson int)
  (def minsz double 10.0)
  (def zcoef double 1.1)
  (decl zlmin (array double ndim))
  (decl zlmax (array double ndim))
  (def st-clt int)

  (= ndpth (+ ndpth 1))
  (if (<= nd minsz)
    (begin 
      (= nson 0)
      (= st-clt (csym::create-cluster nclst ndpth nsrt nd ndim nson))
      (def tempcluster (ptr cluster))
      (= tempcluster (ptr (aref privateCTlist st-clt)))
      (= (aref (fref (mref tempcluster) offsets) 0) -1)
      (= (aref (fref (mref tempcluster) offsets) 1) -1)
      ;;(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) NULL NULL NULL NULL ndim)
    )
    (begin
      (if (> nd PN)
        (begin
          (def tsk (struct minmax))
          (minmax 0 nd zgmid (ptr tsk) ndpth nsrt)
          (= (aref zlmin 0) (fref tsk minx))
          (= (aref zlmax 0) (fref tsk maxx))
          (= (aref zlmin 1) (fref tsk miny))
          (= (aref zlmax 1) (fref tsk maxy))
          (= (aref zlmin 2) (fref tsk minz))
          (= (aref zlmax 2) (fref tsk maxz))
        )
	      (begin
	        (for ((= id 0) (< id ndim) (inc id))
	          (= (aref zlmin id) (aref (aref zgmid 0) id))
	          (= (aref zlmax id) (aref zlmin id))
	          (for ((= il 1) (< il nd) (inc il))
	            (def zg double (aref (aref zgmid il) id))
	            (if (< zg (aref zlmin id)) (begin (= (aref zlmin id) zg))
		            (if (< (aref zlmax id) zg) (begin (= (aref zlmax id) zg)))
              )
            )
          )
        )
      )
      (def zdiff double (- (aref zlmax 0) (aref zlmin 0)))
      (def ncut int 0)
      (for ((= id 0) (< id ndim) (inc id))
	      (def zidiff double (- (aref zlmax id) (aref zlmin id)))
	      (if (> zidiff (* zcoef zdiff))
	        (begin
	          (= zdiff zidiff)
	          (= ncut id)
          )
        )
      )
      (def zlmid double (* 0.5 (+ (aref zlmax ncut) (aref zlmin ncut))))
      (def nl int 0)
      (def nr int (- nd 1))
      (if (> nd PN)
	      (begin
	        (def gn int (+ (/ nd CHUNK_SIZE) 1))
	        (def lessNum (ptr int))
	        (def moreNum (ptr int))
	        (def lessStart (ptr int))
	        (def moreStart (ptr int))
	        (= lessNum (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= moreNum (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= lessStart (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= moreStart (cast (ptr int) (csym::malloc (* (+ gn 500000) (sizeof int)))))
	        (countNum 0 gn lessNum moreNum zgmid nd ncut zlmid gn ndpth nsrt)
	        (= nl (ssum 0 gn ndpth lessNum))
	        (= (aref lessStart 0) 0)
	        (= (aref moreStart 0) nl)
	        (if (and (!= nl 0) (!= nl nd))
		        (begin 
		          (def tl int 0)
		          (def tm int nl)
		          (for ((= id 0) (< id (- gn 1)) (inc id))
		            (+= tl (aref lessNum id))
		            (+= tm (aref moreNum id))
		            (= (aref lessStart (+ id 1)) tl)
		            (= (aref moreStart (+ id 1)) tm)
		          )
		          (setStart 0 gn ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid ndpth nsrt)
		        )
          )
          (free lessNum)
	        (free moreNum)
	        (free lessStart)
	        (free moreStart) 
	      )
	      (begin 
	        (while (< nl nr)
	          (while (and (< nl nd) (<= (aref (aref zgmid nl) ncut) zlmid))
	            (= nl (+ nl 1))
            )
	          (while (and (>= nr 0) (> (aref (aref zgmid nr) ncut) zlmid))
	            (= nr (- nr 1))
            )
	          (if (< nl nr)
		          (begin
		            (for ((= id 0) (< id ndim) (inc id))
		              (def nh double (aref (aref zgmid nl) id))
		              (= (aref (aref zgmid nl) id) (aref (aref zgmid nr) id))
		              (= (aref (aref zgmid nr) id) nh)
		            )
		          )
	          )
	        )
        )
      )
      (if (or (== nl nd) (== nl 0))
	      (begin
	        (= nson 0)
	        (= st-clt (csym::create-cluster nclst ndpth nsrt nd ndim nson))
          (def tempcluster (ptr cluster))
          (= tempcluster (ptr (aref privateCTlist st-clt)))
          (= (aref (fref (mref tempcluster) offsets) 0) -1)
          (= (aref (fref (mref tempcluster) offsets) 1) -1)
          ;;(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) NULL NULL NULL NULL ndim)
        )
	      (begin
	        (= nson 2)
	        (= st-clt (create-cluster nclst ndpth nsrt nd ndim nson))
          (def tempcluster (ptr cluster))
          (= tempcluster (ptr (aref privateCTlist st-clt)))
	        (def nsrt1 int nsrt)
	        (def nd1 int nl)
	        (def nsrt2 int (+ nsrt nl))
	        (def nd2 int (- nd nl))
	        (if (> nd PL)
	          (begin ;parallel here
		          (if (<= nd PN)
		            (begin
		              (do-two
			              (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt1 nd1 md nclst))
			              (begin (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                           #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                 ndim)|#
                    )
			              (handles build-cluster
                      ;;(:guard (def p double 0)(if (> nd MB)(begin(= p 1))(begin(= p 0)))p)
                      (:node (def flag int 3) (if (< ndpth 2)(begin (= flag 2))) flag)
			                (:put
			                  (= this.zgmid (ptr (aref zgmid nl)))
			                  (= this.tempzgmid (ptr (aref tempzgmid nl)))
			                  (= this.ndpth ndpth)
			                  (= this.ndscd ndscd)
			                  (= this.nsrt nsrt2)
			                  (= this.nd nd2)
			                  (= this.md md)
			                  (= this.nclst nclst)
                        (= this.ndim ndim))
			                (:get
			                  (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                        (def brs_min (ptr (array double 3)))
                        (def brs_max (ptr (array double 3)))
                        (def my_rank int)
                        (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
                        (if (== this.rank my_rank)
                          (begin
                            #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                  ndim)|#
                          )
                          (begin
                            (= (fref (mref tempcluster) right_son_node) this.rank)
                            #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                  (ptr this.bmin) 
                                                  (ptr this.bmax) 
                                                  ndim)|#
                          )
                        )
                      )
                    )
                  )
		            )
		            (begin
		              (if (bit-and ndpth 1)
			              (begin ;look into next level
			                (if (and (> nd1 PN) (> nd2 PN))
			                  (begin
				                  (do-two
				                    (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom tempzgmid zgmid ndpth ndscd nsrt1 nd1 md nclst))
				                    (begin (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                                   #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                         ndim)|#
                            )
				                    (handles build-cluster
                              ;;(:guard (def p double 0)(if (> nd MB)(begin(= p 1))(begin(= p 0)))p)
                              (:node (def flag int 3) (if (< ndpth 2)(begin (= flag 2))) flag)
				                      (:put
				                        (= this.zgmid (ptr (aref tempzgmid nl)))
				                        (= this.tempzgmid (ptr (aref zgmid nl)))
				                        (= this.ndpth ndpth)
				                        (= this.ndscd ndscd)
				                        (= this.nsrt nsrt2)
				                        (= this.nd nd2)
				                        (= this.md md)
				                        (= this.nclst nclst)
                                (= this.ndim ndim)
				                      )
				                      (:get
				                        (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                (def my_rank int)
                                (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
                                (if (== this.rank my_rank)
                                  (begin
                                    #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                          ndim)|#
                                    ;;(csym::fprintf stderr "width is %lf!~%" (fref (mref tempcluster) zwdth))
                                  )
                                  (begin
                                    (= (fref (mref tempcluster) right_son_node) this.rank)
                                    #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                          (ptr this.bmin) 
                                                          (ptr this.bmax) 
                                                          ndim)|#
                                  )
                                )
                              )
                            )
                          )
				                )
			                  (begin
			                    (if (and (<= nd1 PN) (<= nd2 PN))
				                    (begin
				                      (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
				                        (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
				                        (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2))
				                      )
				                      (do-two
					                      (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt1 nd1 md nclst))
					                      (begin (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                                       #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                             (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                             (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                             (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                             (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                             ndim)|#
                                )
				                        (handles build-cluster
                                  ;;(:guard (def p double 0)(if (> nd MB)(begin(= p 1))(begin(= p 0)))p)
                                  (:node (def flag int 3) (if (< ndpth 2)(begin (= flag 2))) flag)
					                        (:put
					                          (= this.zgmid (ptr (aref zgmid nl)))
					                          (= this.tempzgmid (ptr (aref tempzgmid nl)))
					                          (= this.ndpth ndpth)
					                          (= this.ndscd ndscd)
					                          (= this.nsrt nsrt2)
					                          (= this.nd nd2)
					                          (= this.md md)
					                          (= this.nclst nclst)
                                    (= this.ndim ndim))
					                        (:get
					                          (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                    (def my_rank int)
                                    (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
                                    (if (== this.rank my_rank)
                                      (begin
                                        #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                              ndim)|#
                                        ;;(csym::fprintf stderr "width is %lf!~%" (fref (mref tempcluster) zwdth))
                                      )
                                      (begin
                                        (= (fref (mref tempcluster) right_son_node) this.rank)
                                        #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                              (ptr this.bmin) 
                                                              (ptr this.bmax) 
                                                              ndim)|#
                                      )
                                    )
                                  )
                                )
                              )
				                    )
				                    (begin
				                      (if (and (<= nd1 PN) (> nd2 PN))
				                        (begin
					                        (for ((= i 0) (< i nl) (inc i))
					                          (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                          (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                          (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2))
					                        )
					                        (do-two
					                          (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt1 nd1 md nclst))
					                          (begin (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                                           #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                 (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                 ndim)|#
                                    )
					                          (handles build-cluster
                                      ;;(:guard (def p double 0)(if (> nd MB)(begin(= p 1))(begin(= p 0)))p)
                                      (:node (def flag int 3) (if (< ndpth 2)(begin (= flag 2))) flag)
					                            (:put
					                              (= this.zgmid (ptr (aref tempzgmid nl)))
					                              (= this.tempzgmid (ptr (aref zgmid nl)))
					                              (= this.ndpth ndpth)
					                              (= this.ndscd ndscd)
					                              (= this.nsrt nsrt2)
					                              (= this.nd nd2)
					                              (= this.md md)
					                              (= this.nclst nclst)
                                        (= this.ndim ndim))
					                            (:get
					                              (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                        (def my_rank int)
                                        (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
                                        (if (== this.rank my_rank)
                                          (begin
                                            #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                  ndim)|#
                                            ;;(csym::fprintf stderr "width is %lf!~%" (fref (mref tempcluster) zwdth))
                                          )
                                          (begin
                                            (= (fref (mref tempcluster) right_son_node) this.rank)
                                            #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr this.bmin) 
                                                                  (ptr this.bmax) 
                                                                  ndim)|#
                                          )
                                        )
                                      )
                                    )
                                  )
					                      )
                                (begin
				                          (if (and (> nd1 PN) (<= nd2 PN))
					                          (begin
					                            (for ((= i nl) (< i nd) (inc i))
					                              (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                              (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                              (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2))
					                            )
					                            (do-two
						                            (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom tempzgmid zgmid ndpth ndscd nsrt1 nd1 md nclst))
						                            (begin (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                                               #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                     ndim)|#
                                        )
					                              (handles build-cluster
                                          ;;(:guard (def p double 0)(if (> nd MB)(begin(= p 1))(begin(= p 0)))p)
                                          (:node (def flag int 3) (if (< ndpth 2)(begin (= flag 2))) flag)
						                              (:put
						                                (= this.zgmid (ptr (aref zgmid nl)))
						                                (= this.tempzgmid (ptr (aref tempzgmid nl)))
						                                (= this.ndpth ndpth)
						                                (= this.ndscd ndscd)
						                                (= this.nsrt nsrt2)
						                                (= this.nd nd2)
						                                (= this.md md)
						                                (= this.nclst nclst)
                                            (= this.ndim ndim))
						                              (:get
						                                (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                            (def my_rank int)
                                            (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
                                            (if (== this.rank my_rank)
                                              (begin
                                                #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                      ndim)|#
                                                ;;(csym::fprintf stderr "width is %lf!~%" (fref (mref tempcluster) zwdth))
                                              )
                                              (begin
                                                (= (fref (mref tempcluster) right_son_node) this.rank)
                                                #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                      (ptr this.bmin) 
                                                                      (ptr this.bmax) 
                                                                      ndim)|#
                                              )
                                            )
                                          )
                                        )
                                      )
					                          )
					                        )
				                        )
				                      )
				                    )
				                  )
			                  )
			                )
			              )
		                (begin ;is even and exchange place
			                (do-two
			                  (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom tempzgmid zgmid ndpth ndscd nsrt1 nd1 md nclst))
                        ;;(= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst ndim))
			                  (begin (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                               #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                     ndim)|#
                        )
			                  (handles build-cluster
                          ;;(:guard (def p double 0)(if (> nd MB)(begin(= p 1))(begin(= p 0)))p)
                          (:node (def flag int 3) (if (< ndpth 2)(begin (= flag 2))) flag)
			                    (:put
			                      (= this.zgmid (ptr (aref tempzgmid nl)))
			                      (= this.tempzgmid (ptr (aref zgmid nl)))
			                      (= this.ndpth ndpth)
			                      (= this.ndscd ndscd)
			                      (= this.nsrt nsrt2)
			                      (= this.nd nd2)
			                      (= this.md md)
			                      (= this.nclst nclst)
                            (= this.ndim ndim))
			                    (:get
			                      (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                            (def my_rank int)
                            (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
                            (if (== this.rank my_rank)
                              (begin
                                #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                      ndim)|#
                                ;;(csym::fprintf stderr "width is %lf!~%" (fref (mref tempcluster) zwdth))
                              )
                              (begin
                                (= (fref (mref tempcluster) right_son_node) this.rank)
                                #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                      (ptr this.bmin) 
                                                      (ptr this.bmax) 
                                                      ndim)|#
                              )
                            )
                          )
                        )
                      )
			              )
		              )
		            )
		          )
		        )
	          (begin ;no parallel here
	            (if (<= nd PN)
		            (begin
		              (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt1 nd1 md nclst))
		              (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                  #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                        ndim)|#
		            )
		            (begin
		              (if (bit-and ndpth 1)
		                (begin ;look into next level
			                (if (and (> nd1 PN) (> nd2 PN))
			                  (begin
			                    (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom tempzgmid zgmid ndpth ndscd nsrt1 nd1 md nclst))
			                    (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                          #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                ndim)|#
			                  )
			                  (begin
			                    (if (and (<= nd1 PN) (<= nd2 PN))
				                    (begin
				                      (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
				                        (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
				                        (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2))
				                      )
				                      (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt1 nd1 md nclst))
				                      (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                              #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                    ndim)|#
				                    )
			                      (begin
				                      (if (and (<= nd1 PN) (> nd2 PN))
				                        (begin
				                          (for ((= i 0) (< i nl) (inc i))
					                          (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                          (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                          (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2))
					                        )
				                          (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom zgmid tempzgmid ndpth ndscd nsrt1 nd1 md nclst))
				                          (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                                  #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                        ndim)|#
				                        )
				                        (begin
				                          (if (and (> nd1 PN) (<= nd2 PN))
					                          (begin
					                            (for ((= i nl) (< i nd) (inc i))
					                              (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                              (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                              (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2))
					                            )
					                            (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom tempzgmid zgmid ndpth ndscd nsrt1 nd1 md nclst))
					                            (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                                      #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                            ndim)|#
					                          )
				                          )
				                        )
				                      )
				                    )
			                    )
			                  )
                      )
			              )
		                (begin ;is even and exchange place
		                  (= (aref (fref (mref tempcluster) offsets) 0) (create-ctree-ssgeom tempzgmid zgmid ndpth ndscd nsrt1 nd1 md nclst))
		                  (= (aref (fref (mref tempcluster) offsets) 1) (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth ndscd nsrt2 nd2 md nclst))
                      #|(csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                            ndim)|#
		                )
                  )
		            )
		          )
	          )
	        )
	      )
	    )
    )
  )
  (def tempcluster (ptr cluster))
  (= tempcluster (ptr (aref privateCTlist st-clt)))
  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
    ndim)
  (= (fref (mref tempcluster) ndscd) nd)
  (return st-clt)
)

(def (minmax i1 i2 zgmid tsk ndpth nsrt) (wfn void int int (ptr (array double 3)) (ptr (struct minmax)) int int)
  ;;(csym::fprintf stderr "minmax: %f %d %d %d %d~%" (csym::get-wall-time) WORKER-ID (+ i1 nsrt) (- (+ i2 nsrt) 1) ndpth)
  (def il int)
  (def minx double)
  (def miny double)
  (def minz double)
  (def maxx double)
  (def maxy double)
  (def maxz double)

  (= minx (aref (aref zgmid i1) 0))
  (= miny (aref (aref zgmid i1) 1))
  (= minz (aref (aref zgmid i1) 2))
  (= maxx minx)
  (= maxy miny)
  (= maxz minz)
  (do-many for il from (+ i1 1) to i2
    (if (== 0 (% (- i1 il 1) Check-interval))
	TCELL-CHECK-REQ)
    (def zg double)
    (= zg (aref (aref zgmid il) 0))
    (if (< zg minx) (begin (= minx zg))
      (if (< maxx zg) (begin (= maxx zg))))
    (= zg (aref (aref zgmid il) 1))
    (if (< zg miny) (begin (= miny zg))
      (if (< maxy zg) (begin (= maxy zg))))
    (= zg (aref (aref zgmid il) 2))
    (if (< zg minz) (begin (= minz zg))
      (if (< maxz zg) (begin (= maxz zg))))
    (handles minmax
      (:guard (< (- i2 il) 10000))
      (:node 1)
      (:put from j1 to j2
            (= this.i1 j1)
            (= this.i2 j2)
            (= this.zgmid zgmid)
            (= this.ndpth ndpth)
            (= this.nsrt nsrt))
      (:get
        (if (< this.minx minx) (begin (= minx this.minx)))
        (if (< maxx this.maxx) (begin (= maxx this.maxx)))
        (if (< this.miny miny) (begin (= miny this.miny)))
        (if (< maxy this.maxy) (begin (= maxy this.maxy)))
        (if (< this.minz minz) (begin (= minz this.minz)))
        (if (< maxz this.maxz) (begin (= maxz this.maxz))))))
  (= (fref tsk -> minx) minx)
  (= (fref tsk -> maxx) maxx)
  (= (fref tsk -> miny) miny)
  (= (fref tsk -> maxy) maxy)
  (= (fref tsk -> minz) minz)
  (= (fref tsk -> maxz) maxz)
)


(def (countNum i1 i2 lessNum moreNum zgmid nd ncut zlmid gn ndpth nsrt)
    (wfn void int int (ptr int) (ptr int) (ptr (array double 3)) int int double int int int)
  (def start int)
  (def end int)
  (= start (+ nsrt (* i1 CHUNK_SIZE)))
  (= end (- (+ nsrt (* i2 CHUNK_SIZE)) 1))
  (if (> end (+ nsrt nd))
    (begin (= end (- (+ nsrt nd) 1))
    )
  )
  (if (> start end) (begin (csym::fprintf stderr "error: start>end~%")))
  ;;(csym::fprintf stderr "countNum: %f %d %d %d %d~%" (csym::get-wall-time) WORKER-ID start end ndpth)
  (def id int)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
	TCELL-CHECK-REQ)
    (def start int (* id CHUNK_SIZE))
    (def end int)
    (def im int)
    (def ln int 0)
    (def mn int 0)
    (if (== id (- gn 1))
	(begin (= end nd))
      (begin (= end (+ start CHUNK_SIZE))))
    (for ((= im start) (< im end) (inc im))
      (if (<= (aref (aref zgmid im) ncut) zlmid)
	  (begin (inc ln)) (begin (inc mn))))
    (= (aref lessNum id) ln)
    (= (aref moreNum id) mn)
    (handles countNum
      (:node 1)
      (:put from j1 to j2
	    (= this.i1 j1)
	    (= this.i2 j2)
	    (= this.lessNum lessNum)
	    (= this.moreNum moreNum)
	    (= this.ncut ncut)
	    (= this.zgmid zgmid)
	    (= this.nd nd)
	    (= this.gn gn)
	    (= this.zlmid zlmid)
	    (= this.ndpth ndpth)
      (= this.nsrt nsrt)
      )
      (:get)
    )
  )
)

(def (setStart i1 i2 ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid ndpth nsrt)
  (wfn void int int int int int double (ptr int) (ptr int) (ptr int) (ptr int) (ptr (array double 3)) (ptr (array double 3)) int int)
  (def start int)
  (def end int)
  (= start (+ nsrt (* i1 CHUNK_SIZE)))
  (= end (- (+ nsrt (* i2 CHUNK_SIZE)) 1))
  (if (> end (+ nsrt nd))
    (begin (= end (- (+ nsrt nd) 1))
    )
  )
  (if (> start end) (begin (csym::fprintf stderr "error: start>end~%")))
  ;;(csym::fprintf stderr "setStart: %f %d %d %d %d~%" (csym::get-wall-time) WORKER-ID start end ndpth)
  (def id int)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
        TCELL-CHECK-REQ)
    (def start int (* id CHUNK_SIZE))
    (def end int)
    (if (== id (- gn 1))
	(begin (= end nd))
      (begin (= end (+ start CHUNK_SIZE))))
    (def im int)
    (def ls int (aref lessStart id))
    (def ms int (aref moreStart id))
    (for ((= im start) (< im end) (inc im))
      (if (<= (aref (aref zgmid im) ncut) zlmid)
	  (begin
	    (= (aref (aref tempzgmid ls) 0) (aref (aref zgmid im) 0))
	    (= (aref (aref tempzgmid ls) 1) (aref (aref zgmid im) 1))
	    (= (aref (aref tempzgmid ls) 2) (aref (aref zgmid im) 2))
	    (inc ls)
	    )
	(begin
	  (= (aref (aref tempzgmid ms) 0) (aref (aref zgmid im) 0))
	  (= (aref (aref tempzgmid ms) 1) (aref (aref zgmid im) 1))
	  (= (aref (aref tempzgmid ms) 2) (aref (aref zgmid im) 2))
	  (inc ms))))
    (handles setStart
      (:node 1)
      (:put from j1 to j2
	      (= this.i1 j1)
	      (= this.i2 j2)
	      (= this.ncut ncut)
	      (= this.gn gn)
	      (= this.nd nd)
        (= this.nsrt nsrt)
	      (= this.zgmid zgmid)
	      (= this.zlmid zlmid)
	      (= this.tempzgmid tempzgmid)
	      (= this.lessNum lessNum)
	      (= this.moreNum moreNum)
	      (= this.lessStart lessStart)
	      (= this.moreStart moreStart)
        (= this.ndpth ndpth)
	    )
      (:get)
	  )
  )
)

(def (ssum i1 i2 ndpth lessNum) (wfn int int int int (ptr int))
  ;;(csym::fprintf stderr "ssum: %f %d %d %d %d~%" (csym::get-wall-time) WORKER-ID i1 i2 ndpth)
  (def id int)
  (def sum int 0)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
        TCELL-CHECK-REQ)
    (+= sum (aref lessNum id))
    (handles ssum
      (:node 1)
      (:put from j1 to j2
	      (= this.i1 j1)
	      (= this.i2 j2)
	      (= this.lessNum lessNum)
        (= this.ndpth ndpth)
	    )
      (:get
	      (+= sum this.sum)
	    )
    )
  )
  (return sum)
)

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001)))
)

(def (csym::get-cpu-time) (fn double void)
  (return (/ (cast double (csym::clock)) CLOCKS-PER-SEC))
)

(def (csym::my-malloc) (fn int void)
  (if (>= (atomic_load (ptr countPCT)) LN)
    (begin
      (csym::fprintf stderr "reach the limit for CT nodes array!~%")
      (csym::exit 99)
    )
  )
  ;;(def pos int)
  (def val int (atomic_load (ptr countPCT)))
  (while (not (csym::atomic_compare_exchange_weak (ptr countPCT) (ptr val) (+ val 1)))
    (= val (atomic_load (ptr countPCT)))
  )
  ;;(= pos (ptr (aref privateCTlist val)))
  (return val)
)

(def (csym::my-allgather para_ptr) (fn (ptr void) (ptr void))
  (def comm_size int)
  (def my_rank int)
  (csym::MPI_Comm_size MPI_COMM_WORLD (ptr comm_size))
  (csym::MPI_Comm_rank MPI_COMM_WORLD (ptr my_rank))
  (csym::MPI_Barrier MPI_COMM_WORLD)
  (def countR int)
  (= countR (atomic_load (ptr countPCT)))
  (csym::MPI_Allgather (ptr countR) 1 MPI_INT length_list comm_size MPI_INT MPI_COMM_WORLD)
  (def il int)
  (= pre (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
  (= pre_BYTE (cast (ptr int) (csym::malloc (* (sizeof int) comm_size))))
  (= (aref pre 0) 0)
  (for ((= il 0) (< il comm_size) (inc il))
    (= (aref pre (+ il 1)) (+ (aref pre il) (aref length_list il)))
  )
  (for ((= il 0) (< il comm_size) (inc il))
    (= (aref length_list_BYTE il) (* (aref length_list il) (sizeof cluster)))
    (= (aref pre_BYTE il) (* (aref pre il) (sizeof cluster)))
  )
  (= total_length (+ (aref pre (- comm_size 1)) (aref length_list (- comm_size 1))))
  ;;(csym::fprintf stderr "rankid %d: total_length is %d!~%" my_rank total_length)
  
  (csym::fprintf stderr "rankid %d: countR is %d!~%" my_rank countR)
  (for ((= il 0) (< il countR) (inc il))
    (if (== (fref (aref privateCTlist il) left_son_node) -1)
      (begin
        (= (aref (fref (aref privateCTlist il) offsets) 0) (+ (aref (fref (aref privateCTlist il) offsets) 0) (aref pre my_rank)))
      )
      (begin
        (= (aref (fref (aref privateCTlist il) offsets) 0) (+ (aref (fref (aref privateCTlist il) offsets) 0) (aref pre (fref (aref privateCTlist il) left_son_node))))
      )
    )
    (if (== (fref (aref privateCTlist il) right_son_node) -1)
      (begin
        (= (aref (fref (aref privateCTlist il) offsets) 1) (+ (aref (fref (aref privateCTlist il) offsets) 1) (aref pre my_rank)))
      )
      (begin
        ;;(csym::fprintf stderr "rank%d: inter-node offset happened right at il:%d~%" my_rank il)
        (= (aref (fref (aref privateCTlist il) offsets) 1) (+ (aref (fref (aref privateCTlist il) offsets) 1) (aref pre (fref (aref privateCTlist il) right_son_node))))
      )
    )
  )
  ;;MPI_Allgatherv begin
  (csym::MPI_Barrier MPI_COMM_WORLD)
  (csym::MPI_Allgatherv (ptr (aref privateCTlist 0)) (* countR (sizeof cluster)) MPI_BYTE (ptr (aref resultCTlist 0)) length_list_BYTE pre_BYTE MPI_BYTE MPI_COMM_WORLD)
  (free privateCTlist)
  (free length_list)
  (free length_list_BYTE)
)
