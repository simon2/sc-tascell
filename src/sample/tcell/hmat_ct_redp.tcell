(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL) 
(%include "rule/tcell-setrule.sh")

(c-exp "#include <mpi.h>")
(c-exp "#include <stdio.h>")
(c-exp "#include <string.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include <unistd.h>")
(c-exp "#include <stdatomic.h>")
(c-exp "#include <mkl.h>")
(c-exp "#include \"../data/bem_file.h\"")
(%defconstant PN 10000)             ;;TS
(%defconstant PL 15)                ;;TN
(%defconstant PB 1000)              ;;TN of BCT
(%defconstant CHUNK_SIZE 1000)      ;;C
(%defconstant Check-interval 100)
(%defconstant LN 20000000)
(%defconstant ND 2)
(%defconstant CASC 1000)
(%defconstant BCTN 1599448480)

(%defconstant TCELL-CHECK-REQ 1)

(extern-decl sv_socket int)

;; ; Test
(%defconstant INPUT_DEFAULT "../bem_data/input_10ts.txt")
;; ; Spherecube
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt_cb_1.5_10_10_10.bin")
;; ; Spherepyramid
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt_pb_1.5_14.bin")
;; ; Sphere
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_50ms.bin")
;; ; humanoids
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_human_1x1.txt_cb_0.3_50_100_1.bin")
;; ; small dataset for debug, N=1000
;(%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt.bin")

(%defconstant NWORKER-MAX 540)
(extern-decl num-thrs unsigned-int)

;; *********define cluster************
(deftype cluster (struct cluster))
(def (struct cluster)
  (decl nstrt int)
  (decl nsize int)
  (decl nnson int)
  (decl bmin (array double 3))
  (decl bmax (array double 3))
  (decl zwdth double)
  (decl lndsd int)
  (decl rndsd int)
  (decl offsets (array int 2)))

(deftype leafmtx (struct leafmtx))
(def (struct leafmtx)
  (decl ltmtx int)
  (decl kt int)
  (decl nstrtl int)
  (decl ndl int)
  (decl nstrtt int)
  (decl ndt int)
  (decl a1 (ptr double))
  (decl a2 (ptr double)))

(deftype leafmtxp (struct leafmtxp))
(def (struct leafmtxp)
  (decl nlf int)
  (decl nlfkt int))

(def worker-data
  (def n int)
  (def leafnode-list (ptr leafmtx))
  (def lnmtx (array int 3))
  (def nlf int)
  (def cas-start int)
  (def cas-counter int))

(def Wdata-list (array (ptr (struct worker-data)) NWORKER-MAX))

(def worker-init
  (= (aref Wdata-list WORKER-ID) (ptr WDATA))
  (= WDATA.n BCTN)
  (= WDATA.leafnode-list (cast (ptr leafmtx) (csym::malloc (* WDATA.n (sizeof leafmtx)))))
  (= (aref WDATA.lnmtx 0) 0)
  (= (aref WDATA.lnmtx 1) 0)
  (= (aref WDATA.lnmtx 2) 0)
  (= WDATA.nlf 0)
  (= WDATA.cas-start 0)
  (= WDATA.cas-counter CASC)
)

(def (task create_leafmtx)
  (def st-cltl int :in)
  (def st-cltt int :in)
  (def i1 int :in)
  (def i2 int :in))

(def (task start-up)
  (def r int))

(def (task CTdist1)
  (def i1 int :in)
  (def i2 int :in))

(def (task build-cluster)
  (def zgmid (ptr (array double 3)))
  (def tempzgmid (ptr (array double 3)))
  (def face2node (ptr (array int 3)) :in)
  (def tempface2node (ptr (array int 3)) :in)
  (def ndpth int :in)
  (def nsrt int :in)
  (def nd int :in)
  (def md int :in)
  (def r int :out)
  (def rank int :out)
  (decl bmin (array double 3))
  (decl bmax (array double 3)))

(def (rslt-sender create_leafmtx)
  (begin
    (def nlf-sum int 0)
    (def i int)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
       (+= nlf-sum nlf-i))
  )
)

(def (rslt-receiver create_leafmtx))

(def (task minmax)
  (def i1 int :in)
  (def i2 int :in)
  (def nsrt int :in)
  (def zgmid (ptr (array double 3)) :in)
  (def ndpth int :in)
  (def minx double)
  (def maxx double)
  (def miny double)
  (def maxy double)
  (def minz double)
  (def maxz double))

(def (task countNum)
  (def i1 int :in)
  (def i2 int :in)
  (def zgmid (ptr (array double 3)) :in)
  (def nd int :in)
  (def ncut int :in)
  (def zlmid double :in)
  (def gn int :in)
  (def lessNum (ptr int) :in)
  (def moreNum (ptr int) :in)
  (def ndpth int :in)
  (def nsrt int :in))

(def (task setStart)
  (def i1 int :in)
  (def i2 int :in)
  (def nd int :in)
  (def ncut int :in)
  (def gn int :in)
  (def nsrt int :in)
  (def zlmid double :in)
  (def zgmid (ptr (array double 3)) :in)
  (def tempzgmid (ptr (array double 3)) :in)
  (def face2node (ptr (array int 3)) :in)
  (def tempface2node (ptr (array int 3)) :in)
  (def lessNum (ptr int) :in)
  (def moreNum (ptr int) :in)
  (def lessStart (ptr int) :in)
  (def moreStart (ptr int) :in)
  (def ndpth int :in))

(def (task ssum)
  (def i1 int :in)
  (def i2 int :in)
  (def lessNum (ptr int) :in)
  (def ndpth int :in)
  (def sum int))

(def (task CT_reorder)
  (def root int :in)
  (def pos int :in)
  (def r int :out)
)

(def (task BCT_cnt_task))
(def (task-body BCT_cnt_task))
(def (task-receiver BCT_cnt_task)
  (csym::BCT_cnt)
)

(def (task CT_cnt_task))
(def (task-body CT_cnt_task))
(def (task-receiver CT_cnt_task)
  (csym::fprintf stderr "#CT_nodes:%d~%" (csym::checkCT 0))
)

(def (task data_load_task))
(def (task-body data_load_task))
(def (task-receiver data_load_task)
  (csym::load_data)
)

(decl (start-up) (wfn int))
(decl (csym::med3 nl nr nlr2)
    (fn int int int int))
(decl (create_leafmtx stc-cltl st-cltt i1 i2)
    (wfn void int int int int))
(decl (csym::dist-2cluster st-cltl st-cltt)
    (fn double int int))
(decl (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3))))
(decl (create-cluster ndpth nstrt nsize nson)
    (wfn int int int int int))
(decl (csym::free-st-clt st-clt)
    (fn void (ptr cluster)))
(decl (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt nd)
    (wfn int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr (array int 3)) int int int))
(decl (csym::get-wall-time) (fn double))
(decl (csym::get-cpu-time) (fn double))
(decl (csym::checkClusterTree f st-clt) (fn void (ptr FILE) int))
(decl (minmax i1 i2 zgmid tsk ndpth nsrt) (wfn void int int (ptr (array double 3)) (ptr (struct minmax)) int int))
(decl (countNum i1 i2 lessNum moreNum zgmid nd ncut glmid gn ndpth nsrt)
    (wfn void int int (ptr int) (ptr int) (ptr (array double 3)) int int double int int int))
(decl (setStart i1 i2 ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid face2node tempface2node ndpth nsrt)
    (wfn void int int int int int double (ptr int) (ptr int) (ptr int) (ptr int) (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr (array int 3)) int int))
(decl (ssum i1 i2 ndpth lessNum) (wfn int int int int (ptr int)))

(decl (my-malloc) (wfn int))
(decl (csym::BCT_cnt) (fn void void))
(decl (csym::load_data) (fn void void))
(decl (csym::checkCT root) (fn int int))
(decl (CT_reorder root pos) (wfn int int int))

(decl (csym::max a b) (fn int int int))
(decl (csym::min a b) (fn int int int))
(decl (csym::dot_product v u n) (fn double (ptr double) (ptr double) int))
(decl (csym::adot_dsm zau zaa zab im ndl ndt mdl mdt) (fn void (ptr double) (ptr double) (ptr double) int int int int int))
(decl (csym::adotsub_dsm zr zaa zab it ndl ndt mdl mdt) (fn void (ptr double) (ptr double) (ptr double) int int int int int))
(decl (csym::cross_product u v w) (fn void (ptr double) (ptr double) (ptr double)))
(decl (csym::face_integral2 xs ys zs x y z) (fn double (array double 3) (array double 3) (array double 3) double double double))
(decl (csym::entry_ij i j face node face2node) (fn double int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3))))
(decl (csym::maxabsvalloc_d za nd) (fn int (ptr double) int))
(decl (csym::minabsvalloc_d za nd) (fn int (ptr double) int))
(decl (csym::comp_col zaa zab ndl ndt k it col nstrtl nstrtt face node face2node lrow_done)
     (fn void (ptr double) (ptr double) int int int int (ptr double) int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr int)))
(decl (csym::comp_row zaa zab ndl ndt k il row nstrtl nstrtt face node face2node lrow_done)
     (fn void (ptr double) (ptr double) int int int int (ptr double) int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr int)))
(decl (csym::acaplus zaa zab ndl ndt nstrtl nstrtt face node face2node kmax eps znrmmat pACA_EPS)
     (fn int (ptr double) (ptr double) int int int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) int double double double))
(decl (csym::fill_sub_leafmtx st_lf face node face2node znrmmat) (fn void (ptr leafmtx) (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) double))

(decl ndim int 3)
(def flag int 0)
(def privateCTlist (ptr cluster))
(def resultCTlist (ptr cluster))
(def CAS_CHUNK (atomic_int) (ATOMIC_VAR_INIT 0))
(def cas_counter int 0)
(def length_list (ptr int))
(def length_list_BYTE (ptr int))
(def pre (ptr int))
(def pre_BYTE (ptr int))
(def flagBCT int 0)
(def nlf long 650000000)
(def nofc int)
(def CT_pre int 0)

(def middle double 0.0)

(def zgmid (ptr (array double 3)))
(def tempzgmid (ptr (array double 3)))
(def face2node (ptr (array int 3)))
(def tempface2node (ptr (array int 3)))

(def (task-body create_leafmtx)
  (create_leafmtx this.st-cltl this.st-cltt this.i1 this.i2))

(def (task-body CTdist1)
  (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node 0 0 nofc)
  (if (> num-procs 1)
      (CT_reorder 0 0)
      (= resultCTlist privateCTlist)))

(def (task-body start-up)
  (= this.r (start-up)))

(def (task-body build-cluster)
  (= this.r (create-ctree-ssgeom this.zgmid this.tempzgmid this.face2node this.tempface2node this.ndpth 
				  this.nsrt this.nd))
  (= this.rank my-rank))

(def (task-body minmax)
  (minmax this.i1 this.i2 this.zgmid (ptr this) this.ndpth this.nsrt))

(def (task-body countNum)
  (countNum this.i1 this.i2 this.lessNum this.moreNum this.zgmid
	    this.nd this.ncut this.zlmid this.gn this.ndpth this.nsrt))

(def (task-body setStart)
  (setStart this.i1 this.i2 this.ncut this.gn this.nd this.zlmid this.lessNum this.moreNum
	    this.lessStart this.moreStart this.zgmid this.tempzgmid this.face2node this.tempface2node this.ndpth this.nsrt))

(def (task-body ssum)
  (= this.sum (ssum this.i1 this.i2 this.ndpth this.lessNum)))

(def (task-body CT_reorder)
  (= this.r (CT_reorder this.root this.pos))
)

(def (start-up) (wfn int)
  (csym::fprintf stderr "Input file: %s~%" INPUT_DEFAULT)
  (csym::fprintf stderr "#proc:%d ~%" num-procs)
  (decl start double)
  (decl end double)
  (decl spent double)

  (tcell-broadcast data_load_task (:put) 
    (csym::load_data)
  )

  (def i int)
  (= start (csym::MPI_Wtime))
  (do-many for i from 0 to num-procs
		(decl start2 double)
    (decl end2 double)
    (= start2 (csym::MPI_Wtime))
    (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node 0 0 nofc)
    (= end2 (csym::MPI_Wtime))
    (csym::fprintf stderr "cluster tree time spent:%.10lf~%" (- end2 start2))
    (csym::fprintf stderr "breakdown:%.10lf~%" (- middle start2))
    (= start2 (csym::MPI_Wtime))
    (if (> num-procs 1)
      (CT_reorder 0 0)
      (= resultCTlist privateCTlist))
    (= end2 (csym::MPI_Wtime))
    (csym::fprintf stderr "reorder time spent:%.10lf~%" (- end2 start2))
    (decl all int)
    (= all (* (fref (aref resultCTlist 0) nnson) (fref (aref resultCTlist 0) nnson)))
    (create_leafmtx 0 0 0 all)
		(handles CTdist1
      (:spawn-from (- i 1))
      (:node 2)
			(:put from j1 to j2)
			(:get)))
  (= end (csym::MPI_Wtime))
  (= spent (- end start))
  (csym::fprintf stderr "mp time spent:%.10lf~%" spent)
  
  (tcell-broadcast BCT_cnt_task (:put) 
    (csym::BCT_cnt)
  )

  (return 0))

(def (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)))
  (def tempcluster (ptr cluster))
  (= tempcluster (ptr (aref privateCTlist st-clt)))
  (def id int)
  (def il int)
  (def zeps double 1.0e-5)
  (if (> (fref (mref tempcluster) nnson) 0)
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (mref bls_min) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (mref bls_max) id)))
      (for ((= id 0) (< id ndim) (inc id))
        (if (< (aref (mref brs_min) id) (aref (fref (mref tempcluster) bmin) id))
          (begin
            (= (aref (fref (mref tempcluster) bmin) id) (aref (mref brs_min) id))))
        (if (< (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))
          (begin
            (= (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))))))
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid 0) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid 0) id))
        ()
      )
      (for ((= id 0) (< id ndim) (inc id))
        (for ((= il 1) (< il (fref (mref tempcluster) nsize)) (inc il))
          (if (< (aref (aref zgmid il) id) (aref (fref (mref tempcluster) bmin) id))
            (begin
              (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid il) id))))
          (if (< (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))
            (begin
              (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))))))
    )
  )
  (def zwdth double (* 
                      (- (aref (fref (mref tempcluster) bmax) 0) 
                        (aref (fref (mref tempcluster) bmin) 0)) 
                      (- (aref (fref (mref tempcluster) bmax) 0)
                        (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
       (+ zwdth
          (* (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))
             (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))))))
  (= zwdth (csym::sqrt zwdth))
  (for ((= id 0) (< id ndim) (inc id))
    (def bdiff double
      (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id)))
    (if (< bdiff (* zeps zwdth))
        (begin
          (= (aref (fref (mref tempcluster) bmax) id)
             (+ (aref (fref (mref tempcluster) bmax) id)
                (* 0.5 (- (* zeps zwdth) bdiff))))
          (= (aref (fref (mref tempcluster) bmin) id)
             (- (aref (fref (mref tempcluster) bmin) id)
                (* 0.5 (- (* zeps zwdth) bdiff)))))))
  (= zwdth
     (* (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))
        (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
      (+ zwdth
        (* (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id))
          (- (aref (fref (mref tempcluster) bmax) id)
             (aref (fref (mref tempcluster) bmin) id))))))
  (= (fref (mref tempcluster) zwdth) (csym::sqrt zwdth))
)

(def (csym::med3 nl nr nlr2) (fn int int int int)
  (decl med3 int)
  (if (< nl nr)
      (begin
        (if (< nr nlr2)
            (begin (= med3 nr))
            (if (< nlr2 nl)
                (begin (= med3 nl))
                (begin (= med3 nlr2)))))
      (begin
        (if (< nlr2 nr)
            (begin (= med3 nr))
            (if (< nl nlr2) 
                (begin (= med3 nl))
                (begin (= med3 nlr2))))))
  (return med3))

(def (create_leafmtx st-cltl st-cltt i1 i2)
    (wfn void int int int int)
  (def ndl int (fref (aref resultCTlist st-cltl) nsize))
  (def ndt int (fref (aref resultCTlist st-cltt) nsize))
  (def nstrtl int (fref (aref resultCTlist st-cltl) nstrt))
  (def nstrtt int (fref (aref resultCTlist st-cltt) nstrt))
  (def nnsonl int (fref (aref resultCTlist st-cltl) nnson))
  (def nnsont int (fref (aref resultCTlist st-cltt) nnson))

  (decl ia int)
  (def nleaf double 15.0)
  (def zeta double 2.0)
  (def zdistlt double (csym::dist-2cluster st-cltl st-cltt))
  (if (and (or (<= (fref (aref resultCTlist st-cltl) zwdth) (* zdistlt zeta))
               (<= (fref (aref resultCTlist st-cltt) zwdth) (* zdistlt zeta)))
           (and (>= ndl nleaf) (>= ndt nleaf)))
    (begin
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) kt) 0)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 1)
      (= WDATA.nlf (+ WDATA.nlf 1)))
    (begin
      (if (or (== nnsonl 0) (== nnsont 0) (<= ndl nleaf) (<= ndt nleaf))
        (begin
	        (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 2)
          (= WDATA.nlf (+ WDATA.nlf 1)))
        (begin
          (if (and (> ndl PB) (> ndt PB))
		        (begin
		          (do-many for ia from i1 to i2
		            (decl il int) (decl it int)
		            (= il (/ ia nnsont))
		            (= it (% ia nnsont))
		            (decl al int)
		            (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson) 
                        (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		            (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)
		            (handles create_leafmtx
			            (:put from j1 to j2
                    (= this.st-cltl st-cltl)
			              (= this.st-cltt st-cltt)
			              (= this.i1 j1)
			              (= this.i2 j2))
			            (:get))))
		        (begin
		          (for ((= ia i1) (< ia i2) (inc ia))
		            (decl il int) (decl it int)
		            (= il (/ ia nnsont))
		            (= it (% ia nnsont))
		            (decl al int)
		            (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson)
                        (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		            (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) 
                                (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)))))))))

(def (csym::dist-2cluster st-cltl st-cltt) (fn double int int)
  (def zs double 0.0) (decl id int)
  (def temp1 (ptr cluster))
  (def temp2 (ptr cluster))
  (= temp1 (ptr (aref resultCTlist st-cltl)))
  (= temp2 (ptr (aref resultCTlist st-cltt)))
  (for ((= id 0) (< id ndim) (inc id))
    (if (< (aref (fref (mref temp1) bmax) id) (aref (fref (mref temp2) bmin) id))
      (begin
        (= zs
          (+ zs
            (* (- (aref (fref (mref temp2) bmin) id)
                  (aref (fref (mref temp1) bmax) id))
                (- (aref (fref (mref temp2) bmin) id)
                  (aref (fref (mref temp1) bmax) id))))))
      (if (< (aref (fref (mref temp2) bmax) id) (aref (fref (mref temp1) bmin) id))
        (begin
          (= zs
            (+ zs
              (* (- (aref (fref (mref temp1) bmin) id)
                    (aref (fref (mref temp2) bmax) id))
                  (- (aref (fref (mref temp1) bmin) id)
                    (aref (fref (mref temp2) bmax) id)))))))))
  (return (sqrt zs)))

(def (csym::checkCT root) (fn int int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (def left int)
      (def right int)
      (= left (csym::checkCT (aref (fref (mref temp) offsets) 0)))
      (= right (csym::checkCT (aref (fref (mref temp) offsets) 1)))
      (return (+ (+ left right) 1)))
    (begin
      (return 1))))

(def (CT_reorder root pos) (wfn int int int)
  (def temp (ptr cluster))
  (= temp (ptr (aref privateCTlist root)))
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (if (> (fref (mref temp) nsize) PL)
        (begin
          (do-two
            (= (aref (fref (mref temp) offsets) 0) (CT_reorder (aref (fref (mref temp) offsets) 0) (+ pos 1)))
            (= (aref (fref (mref temp) offsets) 1) (CT_reorder (aref (fref (mref temp) offsets) 1) (+ pos (+ (fref (mref temp) lndsd) 1))))
            (handles CT_reorder
              (:node 1)
              (:put
                (= this.root (aref (fref (mref temp) offsets) 1))
                (= this.pos (+ pos (+ (fref (mref temp) lndsd) 1))))
              (:get
                (= (aref (fref (mref temp) offsets) 1) this.r)))))
        (begin
          (= (aref (fref (mref temp) offsets) 0) (CT_reorder (aref (fref (mref temp) offsets) 0) (+ pos 1)))
          (= (aref (fref (mref temp) offsets) 1) (CT_reorder (aref (fref (mref temp) offsets) 1) (+ pos (+ (fref (mref temp) lndsd) 1))))
        ))))
  ;;(csym::memcpy (ptr (aref resultCTlist pos)) temp (sizeof cluster))
  (= (aref resultCTlist pos) (mref temp))
  (return pos)
)

(def (csym::checkClusterTree f root) (fn void (ptr FILE) int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (def width double (fref (mref temp) zwdth))
  (csym::fprintf f "%lf~%" width)
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 0))
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 1)))))

(def (create-cluster ndpth nstrt nsize nson)
    (wfn int int int int int)
  (decl st-clt (ptr cluster))
  (def pos int (my-malloc))
  (= st-clt (ptr (aref privateCTlist pos)))
  (= (fref (mref st-clt) nstrt) nstrt)
  (= (fref (mref st-clt) nsize) nsize)
  (= (fref (mref st-clt) nnson) nson)
  (return pos))

(def (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt nd)
    (wfn int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr (array int 3)) int int int)
  (decl i int)
  (decl id int)
  (decl il int)
  (decl nson int)
  (def minsz double 50.0)
  (def zcoef double 1.1)
  (decl zlmin (array double ndim))
  (decl zlmax (array double ndim))
  (def st-clt int)
  (def tempcluster (ptr cluster))
  (= ndpth (+ ndpth 1))
  (if (<= nd minsz)
    (begin 
      (= nson 0)
      (= st-clt (create-cluster ndpth nsrt nd nson))
      (= tempcluster (ptr (aref privateCTlist st-clt)))
      (= (aref (fref (mref tempcluster) offsets) 0) -1)
      (= (aref (fref (mref tempcluster) offsets) 1) -1)
      (= (fref (mref tempcluster) lndsd) 0)
      (= (fref (mref tempcluster) rndsd) 0)
      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) NULL NULL NULL NULL)
    )
    (begin
      (if (> nd PN)
        (begin
          (def tsk (struct minmax))
          (minmax 0 nd zgmid (ptr tsk) ndpth nsrt)
          (= (aref zlmin 0) (fref tsk minx))
          (= (aref zlmax 0) (fref tsk maxx))
          (= (aref zlmin 1) (fref tsk miny))
          (= (aref zlmax 1) (fref tsk maxy))
          (= (aref zlmin 2) (fref tsk minz))
          (= (aref zlmax 2) (fref tsk maxz)))
	      (begin
	        (for ((= id 0) (< id ndim) (inc id))
	          (= (aref zlmin id) (aref (aref zgmid 0) id))
	          (= (aref zlmax id) (aref zlmin id))
	          (for ((= il 1) (< il nd) (inc il))
	            (def zg double (aref (aref zgmid il) id))
	            (if (< zg (aref zlmin id)) (begin (= (aref zlmin id) zg))
		            (if (< (aref zlmax id) zg) (begin (= (aref zlmax id) zg))))))))
      (def zdiff double (- (aref zlmax 0) (aref zlmin 0)))
      (def ncut int 0)
      (for ((= id 0) (< id ndim) (inc id))
	      (def zidiff double (- (aref zlmax id) (aref zlmin id)))
	      (if (> zidiff (* zcoef zdiff))
	        (begin
	          (= zdiff zidiff)
	          (= ncut id))))
      (def zlmid double (* 0.5 (+ (aref zlmax ncut) (aref zlmin ncut))))
      (def nl int 0)
      (def nr int (- nd 1))
      (if (> nd PN)
	      (begin
	        (def gn int (+ (/ nd CHUNK_SIZE) 1))
	        (def lessNum (ptr int))
	        (def moreNum (ptr int))
	        (def lessStart (ptr int))
	        (def moreStart (ptr int))
	        (= lessNum (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= moreNum (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= lessStart (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= moreStart (cast (ptr int) (csym::malloc (* (+ gn 500000) (sizeof int)))))
	        (countNum 0 gn lessNum moreNum zgmid nd ncut zlmid gn ndpth nsrt)
	        (= nl (ssum 0 gn ndpth lessNum))
	        (= (aref lessStart 0) 0)
	        (= (aref moreStart 0) nl)
	        (if (and (!= nl 0) (!= nl nd))
		        (begin 
		          (def tl int 0)
		          (def tm int nl)
		          (for ((= id 0) (< id (- gn 1)) (inc id))
		            (+= tl (aref lessNum id))
		            (+= tm (aref moreNum id))
		            (= (aref lessStart (+ id 1)) tl)
		            (= (aref moreStart (+ id 1)) tm))
		          (setStart 0 gn ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid face2node tempface2node ndpth nsrt)))
          (free lessNum)
	        (free moreNum)
	        (free lessStart)
	        (free moreStart))
	      (begin 
	        (while (< nl nr)
	          (while (and (< nl nd) (<= (aref (aref zgmid nl) ncut) zlmid))
	            (= nl (+ nl 1)))
	          (while (and (>= nr 0) (> (aref (aref zgmid nr) ncut) zlmid))
	            (= nr (- nr 1)))
	          (if (< nl nr)
		          (begin
		            (for ((= id 0) (< id ndim) (inc id))
		              (def nh double (aref (aref zgmid nl) id))
		              (= (aref (aref zgmid nl) id) (aref (aref zgmid nr) id))
		              (= (aref (aref zgmid nr) id) nh)
                )
                (for ((= id 0) (< id ndim) (inc id))
		              (def nh int (aref (aref face2node nl) id))
		              (= (aref (aref face2node nl) id) (aref (aref face2node nr) id))
		              (= (aref (aref face2node nr) id) nh)
                )
              )))))
      (if (or (== nl nd) (== nl 0))
	      (begin
	        (= nson 0)
	        (= st-clt (create-cluster ndpth nsrt nd nson))
          (= tempcluster (ptr (aref privateCTlist st-clt)))
          (= (aref (fref (mref tempcluster) offsets) 0) -1)
          (= (aref (fref (mref tempcluster) offsets) 1) -1)
          (= (fref (mref tempcluster) lndsd) 0)
          (= (fref (mref tempcluster) rndsd) 0)
          (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) NULL NULL NULL NULL)
        )
	      (begin
          (if (== ndpth 2)
            (= middle (csym::MPI_Wtime))
          )
	        (= nson 2)
	        (= st-clt (create-cluster ndpth nsrt nd nson))
          (= tempcluster (ptr (aref privateCTlist st-clt)))
	        (def nsrt1 int nsrt)
	        (def nd1 int nl)
	        (def nsrt2 int (+ nsrt nl))
	        (def nd2 int (- nd nl))
	        (if (> nd PL)
	          (begin ;parallel here
		          (if (<= nd PN)
		            (begin
		              (do-two
			              (= (aref (fref (mref tempcluster) offsets) 0)
                       (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt1 nd1))
			              (begin 
                      (= (aref (fref (mref tempcluster) offsets) 1)
                         (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) (ptr (aref face2node nl)) (ptr (aref tempface2node nl)) ndpth nsrt2 nd2))
                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                            )
                    )
			              (handles build-cluster
                      (:node 1)
			                (:put
			                  (= this.zgmid (ptr (aref zgmid nl)))
			                  (= this.tempzgmid (ptr (aref tempzgmid nl)))
                        (= this.face2node (ptr (aref face2node nl)))
                        (= this.tempface2node (ptr (aref tempface2node nl)))
			                  (= this.ndpth ndpth)
			                  (= this.nsrt nsrt2)
			                  (= this.nd nd2)
			                  (= this.md nofc)
                      )
			                (:get
			                  (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                        (if (== this.rank my-rank)
                          (begin
                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                  )
                          )
                          (begin
                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                  (ptr this.bmin) 
                                                  (ptr this.bmax) 
                                                  )
                          ))))))
		            (begin
                  (if (bit-and ndpth 1)			              
                    (begin ;look into next level
			                (if (and (> nd1 PN) (> nd2 PN))
			                  (begin
				                  (do-two
				                    (= (aref (fref (mref tempcluster) offsets) 0) 
                               (create-ctree-ssgeom tempzgmid zgmid tempface2node face2node ndpth nsrt1 nd1))
				                    (begin 
                              (= (aref (fref (mref tempcluster) offsets) 1)
                                 (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) (ptr (aref tempface2node nl)) (ptr (aref face2node nl)) ndpth nsrt2 nd2))
                              (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                         )
                            )
				                    (handles build-cluster
                              (:node 1)
                              (:put
				                        (= this.zgmid (ptr (aref tempzgmid nl)))
				                        (= this.tempzgmid (ptr (aref zgmid nl)))
                                (= this.face2node (ptr (aref tempface2node nl)))
                                (= this.tempface2node (ptr (aref face2node nl)))
				                        (= this.ndpth ndpth)
				                        (= this.nsrt nsrt2)
				                        (= this.nd nd2)
				                        (= this.md nofc)
                              )
				                      (:get
				                        (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                (if (== this.rank my-rank)
                                  (begin
                                    (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                          )
                                  )
                                  (begin
                                    (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                          (ptr this.bmin) 
                                                          (ptr this.bmax) 
                                                          )
                                  ))))))
			                  (begin
			                    (if (and (<= nd1 PN) (<= nd2 PN))
				                    (begin
				                      (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
				                        (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
				                        (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
                              (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref face2node i) 0) (aref (aref tempface2node i) 0))
				                        (= (aref (aref face2node i) 1) (aref (aref tempface2node i) 1))
				                        (= (aref (aref face2node i) 2) (aref (aref tempface2node i) 2)))
				                      (do-two
					                      (= (aref (fref (mref tempcluster) offsets) 0)
                                   (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt1 nd1))
					                      (begin 
                                  (= (aref (fref (mref tempcluster) offsets) 1)
                                     (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) (ptr (aref face2node nl)) (ptr (aref tempface2node nl)) ndpth nsrt2 nd2))
                                  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                        )
                                )
				                        (handles build-cluster
                                  (:node 1)
                                  (:put
					                          (= this.zgmid (ptr (aref zgmid nl)))
					                          (= this.tempzgmid (ptr (aref tempzgmid nl)))
                                    (= this.face2node (ptr (aref face2node nl)))
                                    (= this.tempface2node (ptr (aref tempface2node nl)))
					                          (= this.ndpth ndpth)
					                          (= this.nsrt nsrt2)
					                          (= this.nd nd2)
					                          (= this.md nofc)
                                  )
					                        (:get
					                          (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                    (if (== this.rank my-rank)
                                      (begin
                                        (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                              )
                                      )
                                      (begin
                                        (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                              (ptr this.bmin) 
                                                              (ptr this.bmax) 
                                                              )
                                      ))))))
				                    (begin
				                      (if (and (<= nd1 PN) (> nd2 PN))
				                        (begin
					                        (for ((= i 0) (< i nl) (inc i))
					                          (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                          (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                          (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
                                  (for ((= i 0) (< i nl) (inc i))
                                    (= (aref (aref face2node i) 0) (aref (aref tempface2node i) 0))
                                    (= (aref (aref face2node i) 1) (aref (aref tempface2node i) 1))
                                    (= (aref (aref face2node i) 2) (aref (aref tempface2node i) 2)))
					                        (do-two
					                          (= (aref (fref (mref tempcluster) offsets) 0)
                                       (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt1 nd1))
					                          (begin
                                      (= (aref (fref (mref tempcluster) offsets) 1)
                                         (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) (ptr (aref tempface2node nl)) (ptr (aref face2node nl)) ndpth nsrt2 nd2))
                                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                            )
                                    )
					                          (handles build-cluster
                                      (:node 1)
                                      (:put
					                              (= this.zgmid (ptr (aref tempzgmid nl)))
					                              (= this.tempzgmid (ptr (aref zgmid nl)))
                                        (= this.face2node (ptr (aref tempface2node nl)))
                                        (= this.tempface2node (ptr (aref face2node nl)))
					                              (= this.ndpth ndpth)
					                              (= this.nsrt nsrt2)
					                              (= this.nd nd2)
					                              (= this.md nofc)
                                      )
					                            (:get
					                              (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                        (if (== this.rank my-rank)
                                          (begin
                                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                  )
                                          )
                                          (begin
                                            ;; (= (fref (mref tempcluster) right_son_node) this.rank)
                                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr this.bmin) 
                                                                  (ptr this.bmax) 
                                                                  )
                                          ))))))
                                (begin
				                          (if (and (> nd1 PN) (<= nd2 PN))
					                          (begin
					                            (for ((= i nl) (< i nd) (inc i))
					                              (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                              (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                              (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
                                      (for ((= i nl) (< i nd) (inc i))
                                        (= (aref (aref face2node i) 0) (aref (aref tempface2node i) 0))
                                        (= (aref (aref face2node i) 1) (aref (aref tempface2node i) 1))
                                        (= (aref (aref face2node i) 2) (aref (aref tempface2node i) 2)))
					                            (do-two
						                            (= (aref (fref (mref tempcluster) offsets) 0)
                                           (create-ctree-ssgeom tempzgmid zgmid tempface2node face2node ndpth nsrt1 nd1))
						                            (begin 
                                          (= (aref (fref (mref tempcluster) offsets) 1)
                                             (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) (ptr (aref face2node nl)) (ptr (aref tempface2node nl)) ndpth nsrt2 nd2))
                                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                  )
                                        )
					                              (handles build-cluster
                                          (:node 1)
                                          (:put
						                                (= this.zgmid (ptr (aref zgmid nl)))
						                                (= this.tempzgmid (ptr (aref tempzgmid nl)))
                                            (= this.face2node (ptr (aref face2node nl)))
                                            (= this.tempface2node (ptr (aref tempface2node nl)))
						                                (= this.ndpth ndpth)
						                                (= this.nsrt nsrt2)
						                                (= this.nd nd2)
						                                (= this.md nofc)
                                          )
						                              (:get
						                                (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                            (if (== this.rank my-rank)
                                              (begin
                                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                      )
                                              )
                                              (begin
                                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                      (ptr this.bmin) 
                                                                      (ptr this.bmax) 
                                                                      )
                                              ))))))))))))))
		                (begin ;is even and exchange place
			                (do-two
			                  (= (aref (fref (mref tempcluster) offsets) 0)
                           (create-ctree-ssgeom tempzgmid zgmid tempface2node face2node ndpth nsrt1 nd1))
			                  (begin
                          (= (aref (fref (mref tempcluster) offsets) 1)
                             (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) (ptr (aref tempface2node nl)) (ptr (aref face2node nl)) ndpth nsrt2 nd2))
                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                     )
                        )
			                  (handles build-cluster
                          (:node 1)
                          (:put
			                      (= this.zgmid (ptr (aref tempzgmid nl)))
			                      (= this.tempzgmid (ptr (aref zgmid nl)))
                            (= this.face2node (ptr (aref tempface2node nl)))
                            (= this.tempface2node (ptr (aref face2node nl)))
			                      (= this.ndpth ndpth)
			                      (= this.nsrt nsrt2)
			                      (= this.nd nd2)
			                      (= this.md nofc)
                          )
			                    (:get
			                      (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                            (if (== this.rank my-rank)
                              (begin
                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                      )
                              )
                              (begin
                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                      (ptr this.bmin) 
                                                      (ptr this.bmax) 
                                                      )
                              ))))))))))
	          (begin ;no parallel here
	            (if (<= nd PN)
		            (begin
		              (= (aref (fref (mref tempcluster) offsets) 0)
                     (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt1 nd1))
		              (= (aref (fref (mref tempcluster) offsets) 1)
                     (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) (ptr (aref face2node nl)) (ptr (aref tempface2node nl)) ndpth nsrt2 nd2))
                  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                        )
		            )
		            (begin
		              (if (bit-and ndpth 1)
		                (begin ;look into next level
			                (if (and (> nd1 PN) (> nd2 PN))
			                  (begin
			                    (= (aref (fref (mref tempcluster) offsets) 0)
                             (create-ctree-ssgeom tempzgmid zgmid tempface2node face2node ndpth nsrt1 nd1))
			                    (= (aref (fref (mref tempcluster) offsets) 1)
                             (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) (ptr (aref tempface2node nl)) (ptr (aref face2node nl)) ndpth nsrt2 nd2))
                          (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                )
			                  )
			                  (begin
			                    (if (and (<= nd1 PN) (<= nd2 PN))
				                    (begin
				                      (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
				                        (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
				                        (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
                              (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref face2node i) 0) (aref (aref tempface2node i) 0))
				                        (= (aref (aref face2node i) 1) (aref (aref tempface2node i) 1))
				                        (= (aref (aref face2node i) 2) (aref (aref tempface2node i) 2)))
				                      (= (aref (fref (mref tempcluster) offsets) 0)
                                 (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt1 nd1))
				                      (= (aref (fref (mref tempcluster) offsets) 1)
                                 (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) (ptr (aref face2node nl)) (ptr (aref tempface2node nl)) ndpth nsrt2 nd2))
                              (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                    )
				                    )
			                      (begin
				                      (if (and (<= nd1 PN) (> nd2 PN))
				                        (begin
				                          (for ((= i 0) (< i nl) (inc i))
					                          (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                          (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                          (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
                                  (for ((= i 0) (< i nl) (inc i))
                                    (= (aref (aref face2node i) 0) (aref (aref tempface2node i) 0))
                                    (= (aref (aref face2node i) 1) (aref (aref tempface2node i) 1))
                                    (= (aref (aref face2node i) 2) (aref (aref tempface2node i) 2)))
				                          (= (aref (fref (mref tempcluster) offsets) 0)
                                     (create-ctree-ssgeom zgmid tempzgmid face2node tempface2node ndpth nsrt1 nd1))
				                          (= (aref (fref (mref tempcluster) offsets) 1)
                                     (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) (ptr (aref tempface2node nl)) (ptr (aref face2node nl)) ndpth nsrt2 nd2))
                                  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                        )
				                        )
				                        (begin
				                          (if (and (> nd1 PN) (<= nd2 PN))
					                          (begin
					                            (for ((= i nl) (< i nd) (inc i))
					                              (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                              (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                              (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
                                      (for ((= i nl) (< i nd) (inc i))
                                        (= (aref (aref face2node i) 0) (aref (aref tempface2node i) 0))
                                        (= (aref (aref face2node i) 1) (aref (aref tempface2node i) 1))
                                        (= (aref (aref face2node i) 2) (aref (aref tempface2node i) 2)))
					                            (= (aref (fref (mref tempcluster) offsets) 0)
                                         (create-ctree-ssgeom tempzgmid zgmid tempface2node face2node ndpth nsrt1 nd1))
					                            (= (aref (fref (mref tempcluster) offsets) 1)
                                         (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) (ptr (aref face2node nl)) (ptr (aref tempface2node nl)) ndpth nsrt2 nd2))
                                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                            )
					                          )))))))))
		                (begin ;is even and exchange place
		                  (= (aref (fref (mref tempcluster) offsets) 0)
                         (create-ctree-ssgeom tempzgmid zgmid tempface2node face2node ndpth nsrt1 nd1))
		                  (= (aref (fref (mref tempcluster) offsets) 1)
                         (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) (ptr (aref tempface2node nl)) (ptr (aref face2node nl)) ndpth nsrt2 nd2))
                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                            )
		                ))))
            ))
          (= (fref (mref tempcluster) lndsd) 
            (+ (+ (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) lndsd)
                (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) rndsd)
            ) 1)
          )
          (= (fref (mref tempcluster) rndsd) 
            (+ (+ (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) lndsd)
                (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) rndsd)
            ) 1)
          )
        ))))
  (return st-clt)
)

(def (minmax i1 i2 zgmid tsk ndpth nsrt) (wfn void int int (ptr (array double 3)) (ptr (struct minmax)) int int)
  ;;(csym::fprintf stderr "minmax: %f %d %d %d %d~%" (csym::get-wall-time) my_rank (+ i1 nsrt) (- (+ i2 nsrt) 1) ndpth)
  (def il int)
  (def minx double)
  (def miny double)
  (def minz double)
  (def maxx double)
  (def maxy double)
  (def maxz double)

  (= minx (aref (aref zgmid i1) 0))
  (= miny (aref (aref zgmid i1) 1))
  (= minz (aref (aref zgmid i1) 2))
  (= maxx minx)
  (= maxy miny)
  (= maxz minz)
  (do-many for il from (+ i1 1) to i2
    (if (== 0 (% (- i1 il 1) Check-interval)) 
      TCELL-CHECK-REQ)
    (def zg double)
    (= zg (aref (aref zgmid il) 0))
    (if (< zg minx) 
      (begin (= minx zg))
      (if (< maxx zg) (begin (= maxx zg))))
    (= zg (aref (aref zgmid il) 1))
    (if (< zg miny)
      (begin (= miny zg))
      (if (< maxy zg) (begin (= maxy zg))))
    (= zg (aref (aref zgmid il) 2))
    (if (< zg minz)
      (begin (= minz zg))
      (if (< maxz zg) (begin (= maxz zg))))
    (handles minmax
      (:node 1)
      (:put from j1 to j2
            (= this.i1 j1)
            (= this.i2 j2)
            (= this.zgmid zgmid)
            (= this.ndpth ndpth)
            (= this.nsrt nsrt))
      (:get
        (if (< this.minx minx) (begin (= minx this.minx)))
        (if (< maxx this.maxx) (begin (= maxx this.maxx)))
        (if (< this.miny miny) (begin (= miny this.miny)))
        (if (< maxy this.maxy) (begin (= maxy this.maxy)))
        (if (< this.minz minz) (begin (= minz this.minz)))
        (if (< maxz this.maxz) (begin (= maxz this.maxz))))))
  (= (fref tsk -> minx) minx)
  (= (fref tsk -> maxx) maxx)
  (= (fref tsk -> miny) miny)
  (= (fref tsk -> maxy) maxy)
  (= (fref tsk -> minz) minz)
  (= (fref tsk -> maxz) maxz))

(def (countNum i1 i2 lessNum moreNum zgmid nd ncut zlmid gn ndpth nsrt)
    (wfn void int int (ptr int) (ptr int) (ptr (array double 3)) int int double int int int)
  (def start int)
  (def end int)
  (= start (+ nsrt (* i1 CHUNK_SIZE)))
  (= end (- (+ nsrt (* i2 CHUNK_SIZE)) 1))
  (if (> end (+ nsrt nd))
    (begin (= end (- (+ nsrt nd) 1))))
  ;; (if (> start end)
  ;;   (begin (csym::fprintf stderr "warning: start>end i1:%ld i2:%ld start:%ld end:%ld~%" i1 i2 start end)))
  ;;(csym::fprintf stderr "countNum: %f %d %d %d %d~%" (csym::get-wall-time) my_rank start end ndpth)
  
  (def id int)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
	    TCELL-CHECK-REQ)
    (def start int (* id CHUNK_SIZE))
    (def end int)
    (def im int)
    (def ln int 0)
    (def mn int 0)
    (if (== id (- gn 1))
	    (begin (= end nd))
      (begin (= end (+ start CHUNK_SIZE))))
    (for ((= im start) (< im end) (inc im))
      (if (<= (aref (aref zgmid im) ncut) zlmid)
	      (begin (inc ln))
        (begin (inc mn))))
    (= (aref lessNum id) ln)
    (= (aref moreNum id) mn)
    (handles countNum
      (:node 1)
      (:put from j1 to j2
	    (= this.i1 j1)
	    (= this.i2 j2)
	    (= this.lessNum lessNum)
	    (= this.moreNum moreNum)
	    (= this.ncut ncut)
	    (= this.zgmid zgmid)
	    (= this.nd nd)
	    (= this.gn gn)
	    (= this.zlmid zlmid)
	    (= this.ndpth ndpth)
      (= this.nsrt nsrt)
      )
      (:get))))

(def (setStart i1 i2 ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid face2node tempface2node ndpth nsrt)
  (wfn void int int int int int double (ptr int) (ptr int) (ptr int) (ptr int) (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr (array int 3)) int int)
  (def start int)
  (def end int)
  (= start (+ nsrt (* i1 CHUNK_SIZE)))
  (= end (- (+ nsrt (* i2 CHUNK_SIZE)) 1))
  (if (> end (+ nsrt nd))
    (begin (= end (- (+ nsrt nd) 1))))
  ;; (if (> start end) (begin (csym::fprintf stderr "error: start>end~%")))
  ;;(csym::fprintf stderr "setStart: %f %d %d %d %d~%" (csym::get-wall-time) my_rank start end ndpth)

  (def id int)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
      TCELL-CHECK-REQ)
    (def start int (* id CHUNK_SIZE))
    (def end int)
    (if (== id (- gn 1))
	    (begin (= end nd))
      (begin (= end (+ start CHUNK_SIZE))))
    (def im int)
    (def ls int (aref lessStart id))
    (def ms int (aref moreStart id))
    (for ((= im start) (< im end) (inc im))
      (if (<= (aref (aref zgmid im) ncut) zlmid)
	      (begin
	        (= (aref (aref tempzgmid ls) 0) (aref (aref zgmid im) 0))
	        (= (aref (aref tempzgmid ls) 1) (aref (aref zgmid im) 1))
	        (= (aref (aref tempzgmid ls) 2) (aref (aref zgmid im) 2))
          (= (aref (aref tempface2node ls) 0) (aref (aref face2node im) 0))
	        (= (aref (aref tempface2node ls) 1) (aref (aref face2node im) 1))
	        (= (aref (aref tempface2node ls) 2) (aref (aref face2node im) 2))
	        (inc ls))
	      (begin
	        (= (aref (aref tempzgmid ms) 0) (aref (aref zgmid im) 0))
	        (= (aref (aref tempzgmid ms) 1) (aref (aref zgmid im) 1))
	        (= (aref (aref tempzgmid ms) 2) (aref (aref zgmid im) 2))
          (= (aref (aref tempface2node ms) 0) (aref (aref face2node im) 0))
	        (= (aref (aref tempface2node ms) 1) (aref (aref face2node im) 1))
	        (= (aref (aref tempface2node ms) 2) (aref (aref face2node im) 2))
	        (inc ms))))
    (handles setStart
      (:node 1)
      (:put from j1 to j2
	      (= this.i1 j1)
	      (= this.i2 j2)
	      (= this.ncut ncut)
	      (= this.gn gn)
	      (= this.nd nd)
        (= this.nsrt nsrt)
	      (= this.zgmid zgmid)
        (= this.face2node face2node)
	      (= this.zlmid zlmid)
	      (= this.tempzgmid tempzgmid)
        (= this.tempface2node tempface2node)
	      (= this.lessNum lessNum)
	      (= this.moreNum moreNum)
	      (= this.lessStart lessStart)
	      (= this.moreStart moreStart)
        (= this.ndpth ndpth))
      (:get))))

(def (ssum i1 i2 ndpth lessNum) (wfn int int int int (ptr int))
  ;;(csym::fprintf stderr "ssum: %f %d %d %d %d~%" (csym::get-wall-time) my_rank i1 i2 ndpth)
  (def id int)
  (def sum int 0)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
      TCELL-CHECK-REQ)
    (+= sum (aref lessNum id))
    (handles ssum
      (:node 1)
      (:put from j1 to j2
	      (= this.i1 j1)
	      (= this.i2 j2)
	      (= this.lessNum lessNum)
        (= this.ndpth ndpth))
      (:get
	      (+= sum this.sum))))
  (return sum))

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))

(def (csym::get-cpu-time) (fn double void)
  (return (/ (cast double (csym::clock)) CLOCKS-PER-SEC)))

(def (my-malloc) (wfn int)
  (def pos int)
  (if (< WDATA.cas-counter CASC)
    (begin
      (= pos (+ WDATA.cas-start WDATA.cas-counter))
      (inc WDATA.cas-counter)
    )
    (begin
      (= WDATA.cas-start (atomic_load (ptr CAS_CHUNK)))
      (while (not (csym::atomic_compare_exchange_weak (ptr CAS_CHUNK) (ptr WDATA.cas-start) (+ WDATA.cas-start CASC)))
        (= WDATA.cas-start (atomic_load (ptr CAS_CHUNK))))
      (= pos WDATA.cas-start)
      (= WDATA.cas-counter 1)
    )
  )
  (if (>= pos LN)
    (begin
      (csym::fprintf stderr "reach the limit for CT nodes array!~%")
      (csym::exit 99)))
  (return pos))

(def (csym::BCT_cnt) (fn void void)
  (begin
    (def i int)
    (def nlf-sum int 0)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
      (if (> nlf-i BCTN)
        (begin
          (csym::fprintf stderr "nlf of counted by worker %d is larger than BCTN!~%" i)
          (csym::exit 99)))
      (+= nlf-sum nlf-i))
    (csym::fprintf stderr "rank: %d, nlf-sum = %d~%" my-rank nlf-sum)
  )
)

(def (csym::load_data) (fn void void)
  (decl fname (ptr char))
  (decl file (ptr FILE))
  (def countOfNode int 0)
  (def count int 0)
  (decl i int)
  (def bi (struct bem-input))
  (decl coordOfNode (ptr (array double 3)))
  ;; (decl face2node (ptr (array int 3)))
  (= fname INPUT-DEFAULT)
  (= file (fopen fname "r"))
  (if (== file NULL)
    (begin
      (csym::fprintf stderr "Error: Unable to input file '%s'!~%" fname)
      (csym::exit 99))
    (begin
      (if (== (csym::read-bem-input file (ptr bi) BI-AUTO) -1)
	      (begin
	        (csym::fprintf stderr "Bem input file read error!~%")
	        (csym::exit 99)))
      (csym::print-bem-input stderr (ptr bi) BI-PRETTY)
      (= countOfNode bi.nNode)
      (= coordOfNode bi.coordOfNode)
      (= count bi.nFace)
      (= zgmid bi.coordOfFace)
      (= face2node bi.face2node)))
  (csym::fclose file)

  (= nofc count)
  (= privateCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
  (= resultCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
  (= tempzgmid (cast (ptr (array double 3)) (csym::malloc (* (* nofc 3) (sizeof double)))))
  (= tempface2node (cast (ptr (array int 3)) (csym::malloc (* (* nofc 3) (sizeof int)))))
)

(def (csym::max a b) (fn int int int) ;;check if max or min function has been defined in any other where.
  (if (>= a b)
    (return a)
  )
  (return b)
)

(def (csym::min a b) (fn int int int)
  (if (<= a b)
    (return a)
  )
  (return b)
)

(def (csym::dot_product v u n) (fn double (ptr double) (ptr double) int)
  (def result double 0.0)
  (def i int)
  (for ((= i 0) (< i n) (inc i))
    (+= result (* (aref v i) (aref u i)))
  )
  (return result)
)

(def (csym::adot_dsm zau zaa zab im ndl ndt mdl mdt) (fn void (ptr double) (ptr double) (ptr double) int int int int int)
  (def it int)
  (def il int)
  (def zaa2 (ptr (array double mdl)))
  (def zab2 (ptr (array double mdt)))
  (= zaa2 (cast (ptr (array double mdl)) zaa))
  (= zab2 (cast (ptr (array double mdt)) zab))
  (for ((= it 0) (< it ndt) (inc it))
    (for ((= il 0) (< il ndl) (inc il))
      (= (aref zau il) (+ (aref zau il) (* (aref zaa2 it il) (aref zab2 it im))))
    )
  )
)

(def (csym::adotsub_dsm zr zaa zab it ndl ndt mdl mdt) (fn void (ptr double) (ptr double) (ptr double) int int int int int)
  (def il int)
  (def zau (ptr double))
  (= zau (cast (ptr double) (csym::calloc ndl (sizeof double))))

  (csym::adot_dsm zau zaa zab it ndl ndt mdl mdt)
  (for ((= il 0) (< il ndl) (inc il))
    (= (aref zr il) (- (aref zr il) (aref zau il)))
  )
  (csym::free zau)
)

(def (csym::cross_product u v w) (fn void (ptr double) (ptr double) (ptr double))
  (= (aref w 0) (- (* (aref u 1) (aref v 2)) (* (aref u 2) (aref v 1))))
  (= (aref w 1) (- (* (aref u 2) (aref v 0)) (* (aref u 0) (aref v 2))))
  (= (aref w 2) (- (* (aref u 0) (aref v 1)) (* (aref u 1) (aref v 0))))
)

(def (csym::face_integral2 xs ys zs x y z) (fn double (array double 3) (array double 3) (array double 3) double double double)
  (def il int)
  (def PI double 3.141592653589793238462643383279)
  (def EPSILON_0 double (* 8.854187818 1e-12))

  (def r (array double 3))
  (defs double xi xj yi dx dy t l m d ti tj)
  (defs double theta omega q g zp zpabs)

  (def i int)
  (def j int)
  (defs (ptr double) u v w)
  (defs double ox oy oz)

  (for ((= il 0) (< il 3) (inc il))
    (def A double (- (aref xs il) x))
    (def B double (- (aref ys il) y))
    (def C double (- (aref zs il) z))
    (= (aref r il) (csym::sqrt (+ (+ (* A A) (* B B)) (* C C))))
  )
  
  (= u (cast (ptr double) (csym::malloc (* (sizeof double) 3))))
  (= v (cast (ptr double) (csym::malloc (* (sizeof double) 3))))
  (= w (cast (ptr double) (csym::malloc (* (sizeof double) 3))))

  (= (aref u 0) (- (aref xs 1) (aref xs 0)))
  (= (aref u 1) (- (aref ys 1) (aref ys 0)))
  (= (aref u 2) (- (aref zs 1) (aref zs 0)))

  (= (aref v 0) (- (aref xs 2) (aref xs 1)))
  (= (aref v 1) (- (aref ys 2) (aref ys 1)))
  (= (aref v 2) (- (aref zs 2) (aref zs 1)))

  (csym::cross_product u v w)

  (def dw double)
  (= dw (csym::sqrt (csym::dot_product w w 3)))
  (for ((= il 0) (< il 3) (inc il))
    (= (aref w il) (/ (aref w il) dw))
  )
  (= (aref u 0) (- x (aref xs 0)))
  (= (aref u 1) (- y (aref ys 0)))
  (= (aref u 2) (- z (aref zs 0)))
  (= zp (csym::dot_product u w 3))

  (= ox (- x (* zp (aref w 0))))
  (= oy (- y (* zp (aref w 1))))
  (= oz (- z (* zp (aref w 2))))
  (= zpabs (csym::fabs zp))

  (def face_integral double 0.0)
  (for ((= i 0) (< i 3) (inc i))
    (= j (% (+ i 1) 3))
    (= (aref u 0) (- (aref xs j) ox))
    (= (aref u 1) (- (aref ys j) oy))
    (= (aref u 2) (- (aref zs j) oz))
    (= xj (csym::sqrt (csym::dot_product u u 3)))

    (for ((= il 0) (< il 3) (inc il))
      (= (aref u il) (/ (aref u il) xj))
    )
    (csym::cross_product w u v)
    (= xi (+ (+ (* (- (aref xs i) ox) (aref u 0)) (* (- (aref ys i) oy) (aref u 1))) (* (- (aref zs i) oz) (aref u 2))))
    (= yi (+ (+ (* (- (aref xs i) ox) (aref v 0)) (* (- (aref ys i) oy) (aref v 1))) (* (- (aref zs i) oz) (aref v 2))))

    (= dx (- xj xi))
    (= dy (- 0.0 yi))
    (= t (csym::sqrt (+ (* dx dx) (* dy dy))))
    (= l (/ dx t))
    (= m (/ dy t))
    (= d (- (* l yi) (* m xi)))
    (= ti (+ (* l xi) (* m yi)))
    (= tj (* l xj))

    (= theta (csym::atan2 yi xi))
    (= omega (+ (- theta (csym::atan2 (* (aref r i) d) (* zpabs ti))) (csym::atan2 (* (aref r j) d) (* zpabs tj))))
    (= q (csym::log (/ (+ (aref r j) tj) (+ (aref r i) ti))))
    (= g (- (* d q) (* zpabs omega)))
    (= face_integral (+ face_integral g))
  )

  (return (/ (csym::fabs face_integral) (* 4.0 (* PI EPSILON_0))))
)

(def (csym::entry_ij i j face node face2node) (fn double int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)))
  (def il int)
  (def n (array int 3))
  (defs (array double 3) xf yf zf)
  (defs double xp yp zp)

  (= xp (aref face i 0))
  (= yp (aref face i 1))
  (= zp (aref face i 2))

  (for ((= il 0) (< il 3) (inc il))
    (= (aref n il) (aref face2node j il))
  )
  (for ((= il 0) (< il 3) (inc il))
    (= (aref xf il) (aref node (aref n il) 0))
    (= (aref yf il) (aref node (aref n il) 1))
    (= (aref zf il) (aref node (aref n il) 2))
  )
  (return (csym::face_integral2 xf yf zf xp yp zp))
)

(def (csym::maxabsvalloc_d za nd) (fn int (ptr double) int)
  (def il int 0)
  (def zz double 0.0)
  (def it int)
  (for ((= it 0) (< it nd) (inc it))
    (if (> (csym::fabs (aref za it)) zz)
      (begin 
        (= il it)
        (= zz (csym::fabs (aref za it))))
    )
  )
  (return il)
)

(def (csym::minabsvalloc_d za nd) (fn int (ptr double) int)
  (def il int 0)
  (def zz double (csym::fabs (aref za 0)))
  (def it int)
  (for ((= it 0) (< it nd) (inc it))
    (if (< (csym::fabs (aref za it)) zz)
      (begin 
        (= il it)
        (= zz (csym::fabs (aref za it))))
    )
  )
  (return il)
)

(def (csym::comp_col zaa zab ndl ndt k it col nstrtl nstrtt face node face2node lrow_done)
     (fn void (ptr double) (ptr double) int int int int (ptr double) int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr int))
  (def il int)
  (for ((= il 0) (< il ndl) (inc il))
    (if (== (aref lrow_done il) 0)
      (begin
        (def ill int (+ il nstrtl))
        (def itt int (+ it nstrtt))
        (= (aref col il) (csym::entry_ij ill itt face node face2node))
      )
    )
  )

  (if (== k 0)
    (return)
  )

  (csym::adotsub_dsm col zaa zab it ndl k ndl ndt)

  (for ((= il 0) (< il ndl) (inc il))
    (if (!= (aref lrow_done il) 0)
      (= (aref col il) 0.0)
    )
  )
)

(def (csym::comp_row zaa zab ndl ndt k il row nstrtl nstrtt face node face2node lrow_done)
     (fn void (ptr double) (ptr double) int int int int (ptr double) int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) (ptr int))
  (def it int)
  (for ((= it 0) (< it ndt) (inc it))
    (if (== (aref lrow_done it) 0)
      (begin
        (def ill int (+ il nstrtl))
        (def itt int (+ it nstrtt))
        (= (aref row it) (csym::entry_ij ill itt face node face2node))
      )
    )
  )

  (if (== k 0)
    (return)
  )

  (csym::adotsub_dsm row zaa zab il ndt k ndt ndl)

  (for ((= it 0) (< it ndt) (inc it))
    (if (!= (aref lrow_done it) 0)
      (= (aref row it) 0.0)
    )
  )
)

(def (csym::acaplus zaa zab ndl ndt nstrtl nstrtt face node face2node kmax eps znrmmat pACA_EPS)
     (fn int (ptr double) (ptr double) int int int int (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) int double double double)
  (defs (ptr double) prow pcol pb_ref pa_ref)
  (defs (ptr int) lrow_done lcol_done)

  (def zaa2 (ptr (array double ndl)))
  (def zab2 (ptr (array double ndt)))
  (= zaa2 (cast (ptr (array double ndl)) zaa))
  (= zab2 (cast (ptr (array double ndt)) zab))

  (defs int il it ib)

  (def INCY int 1)
  (def za_ACA_EPS double 1.0e-10)

  (def znrm double)
  (= znrm (* znrmmat (sqrt (* (cast double ndl) (cast double ndt)))))
  (def ACA_EPS double pACA_EPS)

  (def ntries int (+ (max ndl ndt) 1))
  (def ntries_row int 6)
  (def ntries_col int 6)

  (= lrow_done (cast (ptr int) (calloc ndl (sizeof int))))
  (= lcol_done (cast (ptr int) (calloc ndt (sizeof int))))

  (def k int 0)
  (def j_ref int 0)
  (= pa_ref (cast (ptr double) (malloc (* ndl (sizeof double)))))

  (csym::comp_col zaa zab ndl ndt k j_ref pa_ref nstrtl nstrtt face node face2node lrow_done)

  (def colnorm double (csym::cblas_dnrm2 ndl pa_ref INCY))

  (def i_ref int (csym::minabsvalloc_d pa_ref ndl))
  (def rownorm double (csym::fabs (aref pa_ref i_ref)))
  (= pb_ref (cast (ptr double) (malloc (* ndt (sizeof double)))))
  (csym::comp_row zaa zab ndl ndt k i_ref pb_ref nstrtl nstrtt face node face2node lcol_done)

  (= rownorm (csym::cblas_dnrm2 ndt pb_ref INCY))

  (def apxnorm double 0.0)
  (def lstop_aca int 0)

  (defs double col_maxval row_maxval)
  (while (and (and (< k kmax) (or (> ntries_row 0) (> ntries_col 0))) (> ntries 0))
    (= ntries (- ntries 1))
    (= pcol (ptr (aref zaa2 k 0)))
    (= prow (ptr (aref zab2 k 0)))
    (= col_maxval 0.0)
    (def i int (csym::maxabsvalloc_d pa_ref ndl))
    (= col_maxval (csym::fabs (aref pa_ref i)))
    (= row_maxval 0.0)
    (def j int (csym::maxabsvalloc_d pb_ref ndt))
    (= row_maxval (csym::fabs (aref pb_ref j)))

    (def zinvmax double)
    (if (> row_maxval col_maxval)
      (begin
        (if (!= j j_ref)
          (begin
            (csym::comp_col zaa zab ndl ndt k j pcol nstrtl nstrtt face node face2node lrow_done)
          )
          (begin
            (for ((= il 0) (< il ndl) (inc il))
              (= (aref pcol il) (aref pa_ref il))
            )
          )
        )
        (= i (csym::maxabsvalloc_d pcol ndl))
        (= col_maxval (csym::fabs (aref pcol i)))

        (if (and (< col_maxval ACA_EPS) (>= k 1))
          (begin (= lstop_aca 1))
          (begin
            (csym::comp_row zaa zab ndl ndt k i prow nstrtl nstrtt face node face2node lcol_done)
            (if (> (csym::fabs (aref pcol i)) 1.0e-20)
              (begin (= zinvmax (/ 1.0 (aref pcol i))))
              (begin
                (= k (csym::max (- k 1) 0))
                (break)
              )
            )
            (for ((= il 0) (< il ndl) (inc il))
              (*= (aref pcol il) zinvmax)
            )
          )
        )
      )
      (begin
        (if (!= i i_ref)
          (begin
            (csym::comp_row zaa zab ndl ndt k i prow nstrtl nstrtt face node face2node lcol_done)
          )
          (begin
            (for ((= il 0) (< il ndt) (inc il))
              (= (aref prow il) (aref pb_ref il))
            )
          )
        )
        (= j (csym::maxabsvalloc_d prow ndt))
        (= row_maxval (csym::fabs (aref prow j)))

        (if (and (< row_maxval ACA_EPS) (>= k 1))
          (begin (= lstop_aca 1))
          (begin
            (csym::comp_col zaa zab ndl ndt k j pcol nstrtl nstrtt face node face2node lrow_done)
            (if (> (csym::fabs (aref prow j)) 1.0e-20)
              (begin (= zinvmax (/ 1.0 (aref prow j))))
              (begin
                (= k (csym::max (- k 1) 0))
                (break)
              )
            )
            (for ((= il 0) (< il ndt) (inc il))
              (*= (aref prow il) zinvmax)
            )
          )
        )
      )
    )
    (= (aref lrow_done i) 1)
    (= (aref lcol_done j) 1)

    (if (!= i i_ref)
      (begin
        (= zinvmax (- 0.0 (aref pcol i_ref)))
        (for ((= il 0) (< il ndt) (inc il))
          (+= (aref pb_ref il) (* (aref prow il) zinvmax))
        )
        (= rownorm (csym::cblas_dnrm2 ndt pb_ref INCY))
      )
    )
    (if (or (== i i_ref) (< rownorm ACA_EPS))
      (begin
        (if (== i i_ref)
          (inc ntries_row)
        )
        (if (> ntries_row 0)
          (begin
            (= rownorm 0.0)
            (= i i_ref)
            (while (and (and (!= i (% (- (+ i_ref ndl) 1) ndl)) (< rownorm za_ACA_EPS)) (> ntries 0))
              (if (== (aref lrow_done i) 0)
                (begin
                  (csym::comp_row zaa zab ndl ndt (+ k 1) i pb_ref nstrtl nstrtt face node face2node lcol_done)
                  (= rownorm (csym::cblas_dnrm2 ndt pb_ref INCY))
                  (if (< rownorm ACA_EPS)
                    (= (aref lrow_done i) 1)
                  )
                  (= ntries_row (- ntries_row 1))
                )
                (begin
                  (= rownorm 0.0)
                )
              )
              (= i (% (+ i 1) ndl))
            )
            (= i_ref (% (- (+ i ndl) 1) ndl))
          )
        )
      )
    )

    (if (!= j j_ref)
      (begin
        (= zinvmax (- 0.0 (aref prow j_ref)))
        (for ((= il 0) (< il ndl) (inc il))
          (+= (aref pa_ref il) (* (aref pcol il) zinvmax))
        )
        (= colnorm (csym::cblas_dnrm2 ndl pa_ref INCY))
      )
    )
    (if (or (== j j_ref) (< colnorm ACA_EPS))
      (begin
        (if (== j j_ref)
          (inc ntries_col)
        )
        (if (> ntries_col 0)
          (begin
            (= colnorm 0.0)
            (= j j_ref)
            (while (and (and (!= j (% (- (+ j_ref ndt) 1) ndt)) (< colnorm za_ACA_EPS)) (> ntries 0))
              (if (== (aref lcol_done j) 0)
                (begin
                  (csym::comp_col zaa zab ndl ndt (+ k 1) j pa_ref nstrtl nstrtt face node face2node lrow_done)
                  (= colnorm (csym::cblas_dnrm2 ndl pa_ref INCY))
                  (if (< colnorm ACA_EPS)
                    (= (aref lcol_done j) 1)
                  )
                  (= ntries_col (- ntries_col 1))
                )
                (begin
                  (= colnorm 0.0)
                )
              )
              (= j (% (+ j 1) ndt))
            )
            (= j_ref (% (- (+ j ndt) 1) ndt))
          )
        )
      )
    )

    (if (and (and (< colnorm ACA_EPS) (< rownorm ACA_EPS)) (>= k 1))
      (begin
        (= lstop_aca 1)
        (= k (+ k 1))
      )
    )

    (if (== lstop_aca 0)
      (begin
        (def blknorm double)
        (= blknorm (* (csym::cblas_dnrm2 ndl pcol INCY) (csym::cblas_dnrm2 ndt prow INCY)))
        (if (== k 0)
          (= apxnorm blknorm)
          (begin
            (def compared double (* apxnorm eps))
            (if (and (and (and (< blknorm compared) (< rownorm compared)) (< colnorm compared)) (>= k 1))
              (= lstop_aca 1)
            )
          )
        )
      )
    )
    (if (and (== lstop_aca 1) (>= k 1))
      (break)
    )
    (inc k)
  )
  (if (< k 1)
    (begin
      (csym::fprintf stderr "alert!~%")
      (csym::fprintf stderr "colnorm=%f rownorm=%f ACA_EPS=%f~%" colnorm rownorm ACA_EPS)
      (csym::fprintf stderr "col_maxval=%f row_maxval=%f~%" col_maxval row_maxval)
      (csym::fprintf stderr "ntries_row=%d ntries_col=%d ntries=%d~%" ntries_row ntries_col ntries)
      (csym::fprintf stderr "k=%d~%" k)
    )
  )
  (return k)
)

(def (csym::fill_sub_leafmtx st_lf face node face2node znrmmat) 
     (fn void (ptr leafmtx) (ptr (array double 3)) (ptr (array double 3)) (ptr (array int 3)) double)
  (def eps double 1.0e-4)
  (def ACA_EPS double (* 0.9 eps))
  (def kparam int 200)
  (defs int ip il it)
  
  (def ndl int (fref st_lf -> ndl))
  (def ndt int (fref st_lf -> ndt))
  (def ns int (* ndl ndt))
  (def nstrtl int (fref st_lf -> nstrtl))
  (def nstrtt int (fref st_lf -> nstrtt))
  (def ltmtx int (fref st_lf -> ltmtx))

  (if (== ltmtx 1)
    (begin
      (= (fref st_lf -> a1) (cast (ptr double) (csym::malloc (* (* (sizeof double) ndt) kparam))))
      (= (fref st_lf -> a2) (cast (ptr double) (csym::malloc (* (* (sizeof double) ndl) kparam))))
      (if (or (not (fref st_lf -> a1)) (not (fref st_lf -> a2)))
        (begin
          (csym::fprintf stderr "allocate a1 or a2 failed!~%")
          (csym::exit 99)
        )
      )
      (def kt int)
      (= kt (csym::acaplus (fref st_lf -> a2) (fref st_lf -> a1) ndl ndt nstrtl nstrtt face node face2node kparam eps znrmmat ACA_EPS))
      (if (> kt kparam)
        (csym::fprintf stderr "WARNING: Insufficient k: kt=%d, kparam=%d, nstrtl=%d, nstrtt=%d, ndl=%d, ndt=%d~%" kt kparam nstrtl nstrtt ndl ndt)
      )

      (= (fref st_lf -> a1) (cast (ptr double) (csym::realloc (fref st_lf -> a1) (* (* kt ndt) (sizeof double) ))))
      (= (fref st_lf -> a2) (cast (ptr double) (csym::realloc (fref st_lf -> a2) (* (* kt ndl) (sizeof double) ))))
    )
    (if (== ltmtx 2)
      (begin
        (= (fref st_lf -> a1) (cast (ptr double) (csym::malloc (* (sizeof double) ns))))

        (def tempa1 (ptr (array double ndt)))
        (= tempa1 (cast (ptr (array double ndt)) (fref st_lf -> a1)))

        (for ((= il 0) (< il ndl) (inc il))
          (def ill int (+ it nstrtl))
          (for ((= it 0) (< it ndt) (inc it))
            (def itt int (+ it nstrtt))
            (= (aref tempa1 il it) (csym::entry_ij ill itt face node face2node))
          )
        )
      )
    )
  )
)