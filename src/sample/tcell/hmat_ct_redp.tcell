(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL) 
(%include "rule/tcell-setrule.sh")

(c-exp "#include <mpi.h>")
(c-exp "#include <stdio.h>")
(c-exp "#include <string.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include <unistd.h>")
(c-exp "#include <stdatomic.h>")
(c-exp "#include \"../data/bem_file.h\"")
(%defconstant PN 10000)             ;;TS
(%defconstant PL 15)                ;;TN
(%defconstant PB 1000)              ;;TN of BCT
(%defconstant CHUNK_SIZE 1000)      ;;C
(%defconstant Check-interval 100)
(%defconstant LN 20000000)
(%defconstant ND 2)
(%defconstant CASC 1000)
(%defconstant BCTN 1599448480)

(%defconstant TCELL-CHECK-REQ 1)

(extern-decl sv_socket int)

;; ; Spherecube
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt_cb_1.5_10_10_10.bin")
;; ; Spherepyramid
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt_pb_1.5_14.bin")
;; ; Sphere
;; (%defconstant INPUT_DEFAULT "../data_pro1804/input_50ms.bin")
;; ; humanoids
(%defconstant INPUT_DEFAULT "../data_pro1804/input_human_1x1.txt_cb_0.3_50_100_1.bin")
;; ; small dataset for debug, N=1000
;(%defconstant INPUT_DEFAULT "../data_pro1804/input_100ts.txt.bin")

(%defconstant NWORKER-MAX 540)
(extern-decl num-thrs unsigned-int)

;; *********define cluster************
(deftype cluster (struct cluster))
(def (struct cluster)
  (decl nstrt int)
  (decl nsize int)
  (decl nnson int)
  (decl bmin (array double 3))
  (decl bmax (array double 3))
  (decl zwdth double)
  (decl lndsd int)
  (decl rndsd int)
  (decl offsets (array int 2)))

(deftype leafmtx (struct leafmtx))
(def (struct leafmtx)
  (decl ltmtx int)
  (decl kt int)
  (decl nstrtl int)
  (decl ndl int)
  (decl nstrtt int)
  (decl ndt int)
  (decl a1 (ptr double))
  (decl a2 (ptr double)))

(deftype leafmtxp (struct leafmtxp))
(def (struct leafmtxp)
  (decl nlf int)
  (decl nlfkt int))

(def worker-data
  (def n int)
  (def leafnode-list (ptr leafmtx))
  (def lnmtx (array int 3))
  (def nlf int)
  (def cas-start int)
  (def cas-counter int))

(def Wdata-list (array (ptr (struct worker-data)) NWORKER-MAX))

(def worker-init
  (= (aref Wdata-list WORKER-ID) (ptr WDATA))
  (= WDATA.n BCTN)
  (= WDATA.leafnode-list (cast (ptr leafmtx) (csym::malloc (* WDATA.n (sizeof leafmtx)))))
  (= (aref WDATA.lnmtx 0) 0)
  (= (aref WDATA.lnmtx 1) 0)
  (= (aref WDATA.lnmtx 2) 0)
  (= WDATA.nlf 0)
  (= WDATA.cas-start 0)
  (= WDATA.cas-counter CASC)
)

(def (task create_leafmtx)
  (def st-cltl int :in)
  (def st-cltt int :in)
  (def i1 int :in)
  (def i2 int :in))

(def (task start-up)
  (def r int))

(def (task CTdist1)
  (def i1 int :in)
  (def i2 int :in))

(def (task build-cluster)
  (def zgmid (ptr (array double 3)))
  (def tempzgmid (ptr (array double 3)))
  (def ndpth int :in)
  (def nsrt int :in)
  (def nd int :in)
  (def md int :in)
  (def r int :out)
  (def rank int :out)
  (decl bmin (array double 3))
  (decl bmax (array double 3)))

(def (rslt-sender create_leafmtx)
  (begin
    (def nlf-sum int 0)
    (def i int)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
       (+= nlf-sum nlf-i))
  )
)

(def (rslt-receiver create_leafmtx))

(def (task minmax)
  (def i1 int :in)
  (def i2 int :in)
  (def nsrt int :in)
  (def zgmid (ptr (array double 3)) :in)
  (def ndpth int :in)
  (def minx double)
  (def maxx double)
  (def miny double)
  (def maxy double)
  (def minz double)
  (def maxz double))

(def (task countNum)
  (def i1 int :in)
  (def i2 int :in)
  (def zgmid (ptr (array double 3)) :in)
  (def nd int :in)
  (def ncut int :in)
  (def zlmid double :in)
  (def gn int :in)
  (def lessNum (ptr int) :in)
  (def moreNum (ptr int) :in)
  (def ndpth int :in)
  (def nsrt int :in))

(def (task setStart)
  (def i1 int :in)
  (def i2 int :in)
  (def nd int :in)
  (def ncut int :in)
  (def gn int :in)
  (def nsrt int :in)
  (def zlmid double :in)
  (def zgmid (ptr (array double 3)) :in)
  (def tempzgmid (ptr (array double 3)) :in)
  (def lessNum (ptr int) :in)
  (def moreNum (ptr int) :in)
  (def lessStart (ptr int) :in)
  (def moreStart (ptr int) :in)
  (def ndpth int :in))

(def (task ssum)
  (def i1 int :in)
  (def i2 int :in)
  (def lessNum (ptr int) :in)
  (def ndpth int :in)
  (def sum int))

(def (task CT_reorder)
  (def root int :in)
  (def pos int :in)
  (def r int :out)
)

(def (task BCT_cnt_task))
(def (task-body BCT_cnt_task))
(def (task-receiver BCT_cnt_task)
  (csym::BCT_cnt)
)

(def (task CT_cnt_task))
(def (task-body CT_cnt_task))
(def (task-receiver CT_cnt_task)
  (csym::fprintf stderr "#CT_nodes:%d~%" (csym::checkCT 0))
)

(def (task data_load_task))
(def (task-body data_load_task))
(def (task-receiver data_load_task)
  (csym::load_data)
)

(decl (start-up) (wfn int))
(decl (csym::med3 nl nr nlr2)
    (fn int int int int))
(decl (create_leafmtx stc-cltl st-cltt i1 i2)
    (wfn void int int int int))
(decl (csym::dist-2cluster st-cltl st-cltt)
    (fn double int int))
(decl (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3))))
(decl (create-cluster ndpth nstrt nsize nson)
    (wfn int int int int int))
(decl (csym::free-st-clt st-clt)
    (fn void (ptr cluster)))
(decl (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt nd)
    (wfn int (ptr (array double 3)) (ptr (array double 3)) int int int))
(decl (csym::get-wall-time) (fn double))
(decl (csym::get-cpu-time) (fn double))
(decl (csym::checkClusterTree f st-clt) (fn void (ptr FILE) int))
(decl (minmax i1 i2 zgmid tsk ndpth nsrt) (wfn void int int (ptr (array double 3)) (ptr (struct minmax)) int int))
(decl (countNum i1 i2 lessNum moreNum zgmid nd ncut glmid gn ndpth nsrt)
    (wfn void int int (ptr int) (ptr int) (ptr (array double 3)) int int double int int int))
(decl (setStart i1 i2 ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid ndpth nsrt)
    (wfn void int int int int int double (ptr int) (ptr int) (ptr int) (ptr int) (ptr (array double 3)) (ptr (array double 3)) int int))
(decl (ssum i1 i2 ndpth lessNum) (wfn int int int int (ptr int)))

(decl (my-malloc) (wfn int))
(decl (csym::BCT_cnt) (fn void void))
(decl (csym::load_data) (fn void void))
(decl (csym::checkCT root) (fn int int))
(decl (CT_reorder root pos) (wfn int int int))


(decl ndim int 3)
(def flag int 0)
(def privateCTlist (ptr cluster))
(def resultCTlist (ptr cluster))
(def CAS_CHUNK (atomic_int) (ATOMIC_VAR_INIT 0))
(def cas_counter int 0)
(def length_list (ptr int))
(def length_list_BYTE (ptr int))
(def pre (ptr int))
(def pre_BYTE (ptr int))
(def flagBCT int 0)
(def nlf long 650000000)
(def nofc int)
(def CT_pre int 0)

(def middle double 0.0)

(def zgmid (ptr (array double 3)))
(def tempzgmid (ptr (array double 3)))

(def (task-body create_leafmtx)
  (create_leafmtx this.st-cltl this.st-cltt this.i1 this.i2))

(def (task-body CTdist1)
  (create-ctree-ssgeom zgmid tempzgmid 0 0 nofc)
  (if (> num-procs 1)
      (CT_reorder 0 0)
      (= resultCTlist privateCTlist)))

(def (task-body start-up)
  (= this.r (start-up)))

(def (task-body build-cluster)
  (= this.r (create-ctree-ssgeom this.zgmid this.tempzgmid this.ndpth 
				  this.nsrt this.nd))
  (= this.rank my-rank))

(def (task-body minmax)
  (minmax this.i1 this.i2 this.zgmid (ptr this) this.ndpth this.nsrt))

(def (task-body countNum)
  (countNum this.i1 this.i2 this.lessNum this.moreNum this.zgmid
	    this.nd this.ncut this.zlmid this.gn this.ndpth this.nsrt))

(def (task-body setStart)
  (setStart this.i1 this.i2 this.ncut this.gn this.nd this.zlmid this.lessNum this.moreNum
	    this.lessStart this.moreStart this.zgmid this.tempzgmid this.ndpth this.nsrt))

(def (task-body ssum)
  (= this.sum (ssum this.i1 this.i2 this.ndpth this.lessNum)))

(def (task-body CT_reorder)
  (= this.r (CT_reorder this.root this.pos))
)

(def (start-up) (wfn int)
  (csym::fprintf stderr "Input file: %s~%" INPUT_DEFAULT)
  (csym::fprintf stderr "#proc:%d ~%" num-procs)
  (decl start double)
  (decl end double)
  (decl spent double)

  (tcell-broadcast data_load_task (:put) 
    (csym::load_data)
  )

  (def i int)
  (= start (csym::MPI_Wtime))
  (do-many for i from 0 to num-procs
		(decl start2 double)
    (decl end2 double)
    (= start2 (csym::MPI_Wtime))
    (create-ctree-ssgeom zgmid tempzgmid 0 0 nofc)
    (= end2 (csym::MPI_Wtime))
    (csym::fprintf stderr "cluster tree time spent:%.10lf~%" (- end2 start2))
    (csym::fprintf stderr "breakdown:%.10lf~%" (- middle start2))
    (= start2 (csym::MPI_Wtime))
    (if (> num-procs 1)
      (CT_reorder 0 0)
      (= resultCTlist privateCTlist))
    (= end2 (csym::MPI_Wtime))
    (csym::fprintf stderr "reorder time spent:%.10lf~%" (- end2 start2))
    (decl all int)
    (= all (* (fref (aref resultCTlist 0) nnson) (fref (aref resultCTlist 0) nnson)))
    (create_leafmtx 0 0 0 all)
		(handles CTdist1
      (:spawn-from (- i 1))
      (:node 2)
			(:put from j1 to j2)
			(:get)))
  (= end (csym::MPI_Wtime))
  (= spent (- end start))
  (csym::fprintf stderr "mp time spent:%.10lf~%" spent)
  
  (tcell-broadcast BCT_cnt_task (:put) 
    (csym::BCT_cnt)
  )

  (return 0))

(def (csym::cal-bndbox-cog st-clt zgmid bls_min bls_max brs_min brs_max)
    (fn void int (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)) (ptr (array double 3)))
  (def tempcluster (ptr cluster))
  (= tempcluster (ptr (aref privateCTlist st-clt)))
  (def id int)
  (def il int)
  (def zeps double 1.0e-5)
  (if (> (fref (mref tempcluster) nnson) 0)
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (mref bls_min) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (mref bls_max) id)))
      (for ((= id 0) (< id ndim) (inc id))
        (if (< (aref (mref brs_min) id) (aref (fref (mref tempcluster) bmin) id))
          (begin
            (= (aref (fref (mref tempcluster) bmin) id) (aref (mref brs_min) id))))
        (if (< (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))
          (begin
            (= (aref (fref (mref tempcluster) bmax) id) (aref (mref brs_max) id))))))
    (begin
      (for ((= id 0) (< id ndim) (inc id))
        (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid 0) id))
        (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid 0) id))
        ()
      )
      (for ((= id 0) (< id ndim) (inc id))
        (for ((= il 1) (< il (fref (mref tempcluster) nsize)) (inc il))
          (if (< (aref (aref zgmid il) id) (aref (fref (mref tempcluster) bmin) id))
            (begin
              (= (aref (fref (mref tempcluster) bmin) id) (aref (aref zgmid il) id))))
          (if (< (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))
            (begin
              (= (aref (fref (mref tempcluster) bmax) id) (aref (aref zgmid il) id))))))
    )
  )
  (def zwdth double (* 
                      (- (aref (fref (mref tempcluster) bmax) 0) 
                        (aref (fref (mref tempcluster) bmin) 0)) 
                      (- (aref (fref (mref tempcluster) bmax) 0)
                        (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
       (+ zwdth
          (* (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))
             (- (aref (fref (mref tempcluster) bmax) id)
                (aref (fref (mref tempcluster) bmin) id))))))
  (= zwdth (csym::sqrt zwdth))
  (for ((= id 0) (< id ndim) (inc id))
    (def bdiff double
      (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id)))
    (if (< bdiff (* zeps zwdth))
        (begin
          (= (aref (fref (mref tempcluster) bmax) id)
             (+ (aref (fref (mref tempcluster) bmax) id)
                (* 0.5 (- (* zeps zwdth) bdiff))))
          (= (aref (fref (mref tempcluster) bmin) id)
             (- (aref (fref (mref tempcluster) bmin) id)
                (* 0.5 (- (* zeps zwdth) bdiff)))))))
  (= zwdth
     (* (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))
        (- (aref (fref (mref tempcluster) bmax) 0) (aref (fref (mref tempcluster) bmin) 0))))
  (for ((= id 1) (< id ndim) (inc id))
    (= zwdth
       (* (- (aref (fref (mref tempcluster) bmax) id) (aref (fref (mref tempcluster) bmin) id))
          (- (aref (fref (mref tempcluster) bmax) id)
             (aref (fref (mref tempcluster) bmin) id)))))
  (= (fref (mref tempcluster) zwdth) (csym::sqrt zwdth))
)

(def (csym::med3 nl nr nlr2) (fn int int int int)
  (decl med3 int)
  (if (< nl nr)
      (begin
        (if (< nr nlr2)
            (begin (= med3 nr))
            (if (< nlr2 nl)
                (begin (= med3 nl))
                (begin (= med3 nlr2)))))
      (begin
        (if (< nlr2 nr)
            (begin (= med3 nr))
            (if (< nl nlr2) 
                (begin (= med3 nl))
                (begin (= med3 nlr2))))))
  (return med3))

(def (create_leafmtx st-cltl st-cltt i1 i2)
    (wfn void int int int int)
  (def ndl int (fref (aref resultCTlist st-cltl) nsize))
  (def ndt int (fref (aref resultCTlist st-cltt) nsize))
  (def nstrtl int (fref (aref resultCTlist st-cltl) nstrt))
  (def nstrtt int (fref (aref resultCTlist st-cltt) nstrt))
  (def nnsonl int (fref (aref resultCTlist st-cltl) nnson))
  (def nnsont int (fref (aref resultCTlist st-cltt) nnson))

  (decl ia int)
  (def nleaf double 15.0)
  (def zeta double 2.0)
  (def zdistlt double (csym::dist-2cluster st-cltl st-cltt))
  (if (and (or (<= (* (fref (aref resultCTlist st-cltl) zwdth) zeta) zdistlt)
               (<= (* (fref (aref resultCTlist st-cltt) zwdth) zeta) zdistlt))
           (and (>= ndl nleaf) (>= ndt nleaf)))
    (begin
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) kt) 0)
      (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 1)
      (= WDATA.nlf (+ WDATA.nlf 1)))
    (begin
      (if (or (== nnsonl 0) (== nnsont 0) (<= ndl nleaf) (<= ndt nleaf))
        (begin
	        (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtl) nstrtl)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndl) ndl)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) nstrtt) nstrtt)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ndt) ndt)
          (= (fref (aref WDATA.leafnode-list WDATA.nlf) ltmtx) 2)
          (= WDATA.nlf (+ WDATA.nlf 1)))
        (begin
          (if (and (> ndl PB) (> ndt PB))
		        (begin
		          (do-many for ia from i1 to i2
		            (decl il int) (decl it int)
		            (= il (/ ia nnsont))
		            (= it (% ia nnsont))
		            (decl al int)
		            (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson) 
                        (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		            (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)
		            (handles create_leafmtx
			            (:put from j1 to j2
                    (= this.st-cltl st-cltl)
			              (= this.st-cltt st-cltt)
			              (= this.i1 j1)
			              (= this.i2 j2))
			            (:get))))
		        (begin
		          (for ((= ia i1) (< ia i2) (inc ia))
		            (decl il int) (decl it int)
		            (= il (/ ia nnsont))
		            (= it (% ia nnsont))
		            (decl al int)
		            (= al (* (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltl) offsets) il)) nnson)
                        (fref (aref resultCTlist (aref (fref (aref resultCTlist st-cltt) offsets) it)) nnson)))
		            (create_leafmtx (aref (fref (aref resultCTlist st-cltl) offsets) il) 
                                (aref (fref (aref resultCTlist st-cltt) offsets) it) 0 al)))))))))

(def (csym::dist-2cluster st-cltl st-cltt) (fn double int int)
  (def zs double 0.0) (decl id int)
  (def temp1 (ptr cluster))
  (def temp2 (ptr cluster))
  (= temp1 (ptr (aref resultCTlist st-cltl)))
  (= temp2 (ptr (aref resultCTlist st-cltt)))
  (for ((= id 0) (< id ndim) (inc id))
    (if (< (aref (fref (mref temp1) bmax) id) (aref (fref (mref temp2) bmin) id))
      (begin
        (= zs
          (+ zs
            (* (- (aref (fref (mref temp2) bmin) id)
                  (aref (fref (mref temp1) bmax) id))
                (- (aref (fref (mref temp2) bmin) id)
                  (aref (fref (mref temp1) bmax) id))))))
      (if (< (aref (fref (mref temp2) bmax) id) (aref (fref (mref temp1) bmin) id))
        (begin
          (= zs
            (+ zs
              (* (- (aref (fref (mref temp1) bmin) id)
                    (aref (fref (mref temp2) bmax) id))
                  (- (aref (fref (mref temp1) bmin) id)
                    (aref (fref (mref temp2) bmax) id)))))))))
  (return (sqrt zs)))

(def (csym::checkCT root) (fn int int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (def left int)
      (def right int)
      (= left (csym::checkCT (aref (fref (mref temp) offsets) 0)))
      (= right (csym::checkCT (aref (fref (mref temp) offsets) 1)))
      (return (+ (+ left right) 1)))
    (begin
      (return 1))))

(def (CT_reorder root pos) (wfn int int int)
  (def temp (ptr cluster))
  (= temp (ptr (aref privateCTlist root)))
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (if (> (fref (mref temp) nsize) PL)
        (begin
          (do-two
            (= (aref (fref (mref temp) offsets) 0) (CT_reorder (aref (fref (mref temp) offsets) 0) (+ pos 1)))
            (= (aref (fref (mref temp) offsets) 1) (CT_reorder (aref (fref (mref temp) offsets) 1) (+ pos (+ (fref (mref temp) lndsd) 1))))
            (handles CT_reorder
              (:node 1)
              (:put
                (= this.root (aref (fref (mref temp) offsets) 1))
                (= this.pos (+ pos (+ (fref (mref temp) lndsd) 1))))
              (:get
                (= (aref (fref (mref temp) offsets) 1) this.r)))))
        (begin
          (= (aref (fref (mref temp) offsets) 0) (CT_reorder (aref (fref (mref temp) offsets) 0) (+ pos 1)))
          (= (aref (fref (mref temp) offsets) 1) (CT_reorder (aref (fref (mref temp) offsets) 1) (+ pos (+ (fref (mref temp) lndsd) 1))))
        ))))
  ;;(csym::memcpy (ptr (aref resultCTlist pos)) temp (sizeof cluster))
  (= (aref resultCTlist pos) (mref temp))
  (return pos)
)

(def (csym::checkClusterTree f root) (fn void (ptr FILE) int)
  (def temp (ptr cluster))
  (= temp (ptr (aref resultCTlist root)))
  (def width double (fref (mref temp) zwdth))
  (csym::fprintf f "%lf~%" width)
  (if (== (fref (mref temp) nnson) 2)
    (begin
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 0))
      (csym::checkClusterTree f (aref (fref (mref temp) offsets) 1)))))

(def (create-cluster ndpth nstrt nsize nson)
    (wfn int int int int int)
  (decl st-clt (ptr cluster))
  (def pos int (my-malloc))
  (= st-clt (ptr (aref privateCTlist pos)))
  (= (fref (mref st-clt) nstrt) nstrt)
  (= (fref (mref st-clt) nsize) nsize)
  (= (fref (mref st-clt) nnson) nson)
  (return pos))

(def (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt nd)
    (wfn int (ptr (array double 3)) (ptr (array double 3)) int int int)
  (decl i int)
  (decl id int)
  (decl il int)
  (decl nson int)
  (def minsz double 15.0)
  (def zcoef double 1.1)
  (decl zlmin (array double ndim))
  (decl zlmax (array double ndim))
  (def st-clt int)
  (def tempcluster (ptr cluster))
  (= ndpth (+ ndpth 1))
  (if (<= nd minsz)
    (begin 
      (= nson 0)
      (= st-clt (create-cluster ndpth nsrt nd nson))
      (= tempcluster (ptr (aref privateCTlist st-clt)))
      (= (aref (fref (mref tempcluster) offsets) 0) -1)
      (= (aref (fref (mref tempcluster) offsets) 1) -1)
      (= (fref (mref tempcluster) lndsd) 0)
      (= (fref (mref tempcluster) rndsd) 0)
      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) NULL NULL NULL NULL)
    )
    (begin
      (if (> nd PN)
        (begin
          (def tsk (struct minmax))
          (minmax 0 nd zgmid (ptr tsk) ndpth nsrt)
          (= (aref zlmin 0) (fref tsk minx))
          (= (aref zlmax 0) (fref tsk maxx))
          (= (aref zlmin 1) (fref tsk miny))
          (= (aref zlmax 1) (fref tsk maxy))
          (= (aref zlmin 2) (fref tsk minz))
          (= (aref zlmax 2) (fref tsk maxz)))
	      (begin
	        (for ((= id 0) (< id ndim) (inc id))
	          (= (aref zlmin id) (aref (aref zgmid 0) id))
	          (= (aref zlmax id) (aref zlmin id))
	          (for ((= il 1) (< il nd) (inc il))
	            (def zg double (aref (aref zgmid il) id))
	            (if (< zg (aref zlmin id)) (begin (= (aref zlmin id) zg))
		            (if (< (aref zlmax id) zg) (begin (= (aref zlmax id) zg))))))))
      (def zdiff double (- (aref zlmax 0) (aref zlmin 0)))
      (def ncut int 0)
      (for ((= id 0) (< id ndim) (inc id))
	      (def zidiff double (- (aref zlmax id) (aref zlmin id)))
	      (if (> zidiff (* zcoef zdiff))
	        (begin
	          (= zdiff zidiff)
	          (= ncut id))))
      (def zlmid double (* 0.5 (+ (aref zlmax ncut) (aref zlmin ncut))))
      (def nl int 0)
      (def nr int (- nd 1))
      (if (> nd PN)
	      (begin
	        (def gn int (+ (/ nd CHUNK_SIZE) 1))
	        (def lessNum (ptr int))
	        (def moreNum (ptr int))
	        (def lessStart (ptr int))
	        (def moreStart (ptr int))
	        (= lessNum (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= moreNum (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= lessStart (cast (ptr int) (csym::malloc (* gn (sizeof int)))))
	        (= moreStart (cast (ptr int) (csym::malloc (* (+ gn 500000) (sizeof int)))))
	        (countNum 0 gn lessNum moreNum zgmid nd ncut zlmid gn ndpth nsrt)
	        (= nl (ssum 0 gn ndpth lessNum))
	        (= (aref lessStart 0) 0)
	        (= (aref moreStart 0) nl)
	        (if (and (!= nl 0) (!= nl nd))
		        (begin 
		          (def tl int 0)
		          (def tm int nl)
		          (for ((= id 0) (< id (- gn 1)) (inc id))
		            (+= tl (aref lessNum id))
		            (+= tm (aref moreNum id))
		            (= (aref lessStart (+ id 1)) tl)
		            (= (aref moreStart (+ id 1)) tm))
		          (setStart 0 gn ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid ndpth nsrt)))
          (free lessNum)
	        (free moreNum)
	        (free lessStart)
	        (free moreStart))
	      (begin 
	        (while (< nl nr)
	          (while (and (< nl nd) (<= (aref (aref zgmid nl) ncut) zlmid))
	            (= nl (+ nl 1)))
	          (while (and (>= nr 0) (> (aref (aref zgmid nr) ncut) zlmid))
	            (= nr (- nr 1)))
	          (if (< nl nr)
		          (begin
		            (for ((= id 0) (< id ndim) (inc id))
		              (def nh double (aref (aref zgmid nl) id))
		              (= (aref (aref zgmid nl) id) (aref (aref zgmid nr) id))
		              (= (aref (aref zgmid nr) id) nh)))))))
      (if (or (== nl nd) (== nl 0))
	      (begin
	        (= nson 0)
	        (= st-clt (create-cluster ndpth nsrt nd nson))
          (= tempcluster (ptr (aref privateCTlist st-clt)))
          (= (aref (fref (mref tempcluster) offsets) 0) -1)
          (= (aref (fref (mref tempcluster) offsets) 1) -1)
          (= (fref (mref tempcluster) lndsd) 0)
          (= (fref (mref tempcluster) rndsd) 0)
          (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) NULL NULL NULL NULL)
        )
	      (begin
          (if (== ndpth 2)
            (= middle (csym::MPI_Wtime))
          )
	        (= nson 2)
	        (= st-clt (create-cluster ndpth nsrt nd nson))
          (= tempcluster (ptr (aref privateCTlist st-clt)))
	        (def nsrt1 int nsrt)
	        (def nd1 int nl)
	        (def nsrt2 int (+ nsrt nl))
	        (def nd2 int (- nd nl))
	        (if (> nd PL)
	          (begin ;parallel here
		          (if (<= nd PN)
		            (begin
		              (do-two
			              (= (aref (fref (mref tempcluster) offsets) 0)
                       (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt1 nd1))
			              (begin 
                      (= (aref (fref (mref tempcluster) offsets) 1)
                         (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth nsrt2 nd2))
                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                            )
                    )
			              (handles build-cluster
                      (:node 1)
			                (:put
			                  (= this.zgmid (ptr (aref zgmid nl)))
			                  (= this.tempzgmid (ptr (aref tempzgmid nl)))
			                  (= this.ndpth ndpth)
			                  (= this.nsrt nsrt2)
			                  (= this.nd nd2)
			                  (= this.md nofc)
                      )
			                (:get
			                  (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                        (if (== this.rank my-rank)
                          (begin
                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                  )
                          )
                          (begin
                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                  (ptr this.bmin) 
                                                  (ptr this.bmax) 
                                                  )
                          ))))))
		            (begin
                  (if (bit-and ndpth 1)			              
                    (begin ;look into next level
			                (if (and (> nd1 PN) (> nd2 PN))
			                  (begin
				                  (do-two
				                    (= (aref (fref (mref tempcluster) offsets) 0) 
                               (create-ctree-ssgeom tempzgmid zgmid ndpth nsrt1 nd1))
				                    (begin 
                              (= (aref (fref (mref tempcluster) offsets) 1)
                                 (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth nsrt2 nd2))
                              (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                         (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                         )
                            )
				                    (handles build-cluster
                              (:node 1)
                              (:put
				                        (= this.zgmid (ptr (aref tempzgmid nl)))
				                        (= this.tempzgmid (ptr (aref zgmid nl)))
				                        (= this.ndpth ndpth)
				                        (= this.nsrt nsrt2)
				                        (= this.nd nd2)
				                        (= this.md nofc)
                              )
				                      (:get
				                        (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                (if (== this.rank my-rank)
                                  (begin
                                    (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                          )
                                  )
                                  (begin
                                    (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                          (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                          (ptr this.bmin) 
                                                          (ptr this.bmax) 
                                                          )
                                  ))))))
			                  (begin
			                    (if (and (<= nd1 PN) (<= nd2 PN))
				                    (begin
				                      (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
				                        (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
				                        (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
				                      (do-two
					                      (= (aref (fref (mref tempcluster) offsets) 0)
                                   (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt1 nd1))
					                      (begin 
                                  (= (aref (fref (mref tempcluster) offsets) 1)
                                     (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth nsrt2 nd2))
                                  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                        )
                                )
				                        (handles build-cluster
                                  (:node 1)
                                  (:put
					                          (= this.zgmid (ptr (aref zgmid nl)))
					                          (= this.tempzgmid (ptr (aref tempzgmid nl)))
					                          (= this.ndpth ndpth)
					                          (= this.nsrt nsrt2)
					                          (= this.nd nd2)
					                          (= this.md nofc)
                                  )
					                        (:get
					                          (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                    (if (== this.rank my-rank)
                                      (begin
                                        (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                              )
                                      )
                                      (begin
                                        (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                              (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                              (ptr this.bmin) 
                                                              (ptr this.bmax) 
                                                              )
                                      ))))))
				                    (begin
				                      (if (and (<= nd1 PN) (> nd2 PN))
				                        (begin
					                        (for ((= i 0) (< i nl) (inc i))
					                          (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                          (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                          (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
					                        (do-two
					                          (= (aref (fref (mref tempcluster) offsets) 0)
                                       (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt1 nd1))
					                          (begin
                                      (= (aref (fref (mref tempcluster) offsets) 1)
                                         (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth nsrt2 nd2))
                                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                            )
                                    )
					                          (handles build-cluster
                                      (:node 1)
                                      (:put
					                              (= this.zgmid (ptr (aref tempzgmid nl)))
					                              (= this.tempzgmid (ptr (aref zgmid nl)))
					                              (= this.ndpth ndpth)
					                              (= this.nsrt nsrt2)
					                              (= this.nd nd2)
					                              (= this.md nofc)
                                      )
					                            (:get
					                              (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                        (if (== this.rank my-rank)
                                          (begin
                                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                  )
                                          )
                                          (begin
                                            ;; (= (fref (mref tempcluster) right_son_node) this.rank)
                                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr this.bmin) 
                                                                  (ptr this.bmax) 
                                                                  )
                                          ))))))
                                (begin
				                          (if (and (> nd1 PN) (<= nd2 PN))
					                          (begin
					                            (for ((= i nl) (< i nd) (inc i))
					                              (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                              (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                              (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
					                            (do-two
						                            (= (aref (fref (mref tempcluster) offsets) 0)
                                           (create-ctree-ssgeom tempzgmid zgmid ndpth nsrt1 nd1))
						                            (begin 
                                          (= (aref (fref (mref tempcluster) offsets) 1)
                                             (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth nsrt2 nd2))
                                            (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                  (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                  )
                                        )
					                              (handles build-cluster
                                          (:node 1)
                                          (:put
						                                (= this.zgmid (ptr (aref zgmid nl)))
						                                (= this.tempzgmid (ptr (aref tempzgmid nl)))
						                                (= this.ndpth ndpth)
						                                (= this.nsrt nsrt2)
						                                (= this.nd nd2)
						                                (= this.md nofc)
                                          )
						                              (:get
						                                (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                                            (if (== this.rank my-rank)
                                              (begin
                                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                                      )
                                              )
                                              (begin
                                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                                      (ptr this.bmin) 
                                                                      (ptr this.bmax) 
                                                                      )
                                              ))))))))))))))
		                (begin ;is even and exchange place
			                (do-two
			                  (= (aref (fref (mref tempcluster) offsets) 0)
                           (create-ctree-ssgeom tempzgmid zgmid ndpth nsrt1 nd1))
			                  (begin
                          (= (aref (fref (mref tempcluster) offsets) 1)
                             (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth nsrt2 nd2))
                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                     (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                     )
                        )
			                  (handles build-cluster
                          (:node 1)
                          (:put
			                      (= this.zgmid (ptr (aref tempzgmid nl)))
			                      (= this.tempzgmid (ptr (aref zgmid nl)))
			                      (= this.ndpth ndpth)
			                      (= this.nsrt nsrt2)
			                      (= this.nd nd2)
			                      (= this.md nofc)
                          )
			                    (:get
			                      (= (aref (fref (mref tempcluster) offsets) 1) this.r)
                            (if (== this.rank my-rank)
                              (begin
                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                      )
                              )
                              (begin
                                (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                      (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                      (ptr this.bmin) 
                                                      (ptr this.bmax) 
                                                      )
                              ))))))))))
	          (begin ;no parallel here
	            (if (<= nd PN)
		            (begin
		              (= (aref (fref (mref tempcluster) offsets) 0)
                     (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt1 nd1))
		              (= (aref (fref (mref tempcluster) offsets) 1)
                     (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth nsrt2 nd2))
                  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                        )
		            )
		            (begin
		              (if (bit-and ndpth 1)
		                (begin ;look into next level
			                (if (and (> nd1 PN) (> nd2 PN))
			                  (begin
			                    (= (aref (fref (mref tempcluster) offsets) 0)
                             (create-ctree-ssgeom tempzgmid zgmid ndpth nsrt1 nd1))
			                    (= (aref (fref (mref tempcluster) offsets) 1)
                             (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth nsrt2 nd2))
                          (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                )
			                  )
			                  (begin
			                    (if (and (<= nd1 PN) (<= nd2 PN))
				                    (begin
				                      (for ((= i 0) (< i nd) (inc i))
				                        (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
				                        (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
				                        (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
				                      (= (aref (fref (mref tempcluster) offsets) 0)
                                 (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt1 nd1))
				                      (= (aref (fref (mref tempcluster) offsets) 1)
                                 (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth nsrt2 nd2))
                              (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                    (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                    )
				                    )
			                      (begin
				                      (if (and (<= nd1 PN) (> nd2 PN))
				                        (begin
				                          (for ((= i 0) (< i nl) (inc i))
					                          (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                          (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                          (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
				                          (= (aref (fref (mref tempcluster) offsets) 0)
                                     (create-ctree-ssgeom zgmid tempzgmid ndpth nsrt1 nd1))
				                          (= (aref (fref (mref tempcluster) offsets) 1)
                                     (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth nsrt2 nd2))
                                  (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                        (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                        )
				                        )
				                        (begin
				                          (if (and (> nd1 PN) (<= nd2 PN))
					                          (begin
					                            (for ((= i nl) (< i nd) (inc i))
					                              (= (aref (aref zgmid i) 0) (aref (aref tempzgmid i) 0))
					                              (= (aref (aref zgmid i) 1) (aref (aref tempzgmid i) 1))
					                              (= (aref (aref zgmid i) 2) (aref (aref tempzgmid i) 2)))
					                            (= (aref (fref (mref tempcluster) offsets) 0)
                                         (create-ctree-ssgeom tempzgmid zgmid ndpth nsrt1 nd1))
					                            (= (aref (fref (mref tempcluster) offsets) 1)
                                         (create-ctree-ssgeom (ptr (aref zgmid nl)) (ptr (aref tempzgmid nl)) ndpth nsrt2 nd2))
                                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                                            )
					                          )))))))))
		                (begin ;is even and exchange place
		                  (= (aref (fref (mref tempcluster) offsets) 0)
                         (create-ctree-ssgeom tempzgmid zgmid ndpth nsrt1 nd1))
		                  (= (aref (fref (mref tempcluster) offsets) 1)
                         (create-ctree-ssgeom (ptr (aref tempzgmid nl)) (ptr (aref zgmid nl)) ndpth nsrt2 nd2))
                      (csym::cal-bndbox-cog st-clt (ptr (aref zgmid 0)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) bmax)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmin)) 
                                            (ptr (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) bmax)) 
                                            )
		                ))))
            ))
          (= (fref (mref tempcluster) lndsd) 
            (+ (+ (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) lndsd)
                (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 0)) rndsd)
            ) 1)
          )
          (= (fref (mref tempcluster) rndsd) 
            (+ (+ (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) lndsd)
                (fref (aref privateCTlist (aref (fref (mref tempcluster) offsets) 1)) rndsd)
            ) 1)
          )
        ))))
  (return st-clt)
)

(def (minmax i1 i2 zgmid tsk ndpth nsrt) (wfn void int int (ptr (array double 3)) (ptr (struct minmax)) int int)
  ;;(csym::fprintf stderr "minmax: %f %d %d %d %d~%" (csym::get-wall-time) my_rank (+ i1 nsrt) (- (+ i2 nsrt) 1) ndpth)
  (def il int)
  (def minx double)
  (def miny double)
  (def minz double)
  (def maxx double)
  (def maxy double)
  (def maxz double)

  (= minx (aref (aref zgmid i1) 0))
  (= miny (aref (aref zgmid i1) 1))
  (= minz (aref (aref zgmid i1) 2))
  (= maxx minx)
  (= maxy miny)
  (= maxz minz)
  (do-many for il from (+ i1 1) to i2
    (if (== 0 (% (- i1 il 1) Check-interval)) 
      TCELL-CHECK-REQ)
    (def zg double)
    (= zg (aref (aref zgmid il) 0))
    (if (< zg minx) 
      (begin (= minx zg))
      (if (< maxx zg) (begin (= maxx zg))))
    (= zg (aref (aref zgmid il) 1))
    (if (< zg miny)
      (begin (= miny zg))
      (if (< maxy zg) (begin (= maxy zg))))
    (= zg (aref (aref zgmid il) 2))
    (if (< zg minz)
      (begin (= minz zg))
      (if (< maxz zg) (begin (= maxz zg))))
    (handles minmax
      (:node 1)
      (:put from j1 to j2
            (= this.i1 j1)
            (= this.i2 j2)
            (= this.zgmid zgmid)
            (= this.ndpth ndpth)
            (= this.nsrt nsrt))
      (:get
        (if (< this.minx minx) (begin (= minx this.minx)))
        (if (< maxx this.maxx) (begin (= maxx this.maxx)))
        (if (< this.miny miny) (begin (= miny this.miny)))
        (if (< maxy this.maxy) (begin (= maxy this.maxy)))
        (if (< this.minz minz) (begin (= minz this.minz)))
        (if (< maxz this.maxz) (begin (= maxz this.maxz))))))
  (= (fref tsk -> minx) minx)
  (= (fref tsk -> maxx) maxx)
  (= (fref tsk -> miny) miny)
  (= (fref tsk -> maxy) maxy)
  (= (fref tsk -> minz) minz)
  (= (fref tsk -> maxz) maxz))

(def (countNum i1 i2 lessNum moreNum zgmid nd ncut zlmid gn ndpth nsrt)
    (wfn void int int (ptr int) (ptr int) (ptr (array double 3)) int int double int int int)
  (def start int)
  (def end int)
  (= start (+ nsrt (* i1 CHUNK_SIZE)))
  (= end (- (+ nsrt (* i2 CHUNK_SIZE)) 1))
  (if (> end (+ nsrt nd))
    (begin (= end (- (+ nsrt nd) 1))))
  ;; (if (> start end)
  ;;   (begin (csym::fprintf stderr "warning: start>end i1:%ld i2:%ld start:%ld end:%ld~%" i1 i2 start end)))
  ;;(csym::fprintf stderr "countNum: %f %d %d %d %d~%" (csym::get-wall-time) my_rank start end ndpth)
  
  (def id int)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
	    TCELL-CHECK-REQ)
    (def start int (* id CHUNK_SIZE))
    (def end int)
    (def im int)
    (def ln int 0)
    (def mn int 0)
    (if (== id (- gn 1))
	    (begin (= end nd))
      (begin (= end (+ start CHUNK_SIZE))))
    (for ((= im start) (< im end) (inc im))
      (if (<= (aref (aref zgmid im) ncut) zlmid)
	      (begin (inc ln))
        (begin (inc mn))))
    (= (aref lessNum id) ln)
    (= (aref moreNum id) mn)
    (handles countNum
      (:node 1)
      (:put from j1 to j2
	    (= this.i1 j1)
	    (= this.i2 j2)
	    (= this.lessNum lessNum)
	    (= this.moreNum moreNum)
	    (= this.ncut ncut)
	    (= this.zgmid zgmid)
	    (= this.nd nd)
	    (= this.gn gn)
	    (= this.zlmid zlmid)
	    (= this.ndpth ndpth)
      (= this.nsrt nsrt)
      )
      (:get))))

(def (setStart i1 i2 ncut gn nd zlmid lessNum moreNum lessStart moreStart zgmid tempzgmid ndpth nsrt)
  (wfn void int int int int int double (ptr int) (ptr int) (ptr int) (ptr int) (ptr (array double 3)) (ptr (array double 3)) int int)
  (def start int)
  (def end int)
  (= start (+ nsrt (* i1 CHUNK_SIZE)))
  (= end (- (+ nsrt (* i2 CHUNK_SIZE)) 1))
  (if (> end (+ nsrt nd))
    (begin (= end (- (+ nsrt nd) 1))))
  ;; (if (> start end) (begin (csym::fprintf stderr "error: start>end~%")))
  ;;(csym::fprintf stderr "setStart: %f %d %d %d %d~%" (csym::get-wall-time) my_rank start end ndpth)

  (def id int)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
      TCELL-CHECK-REQ)
    (def start int (* id CHUNK_SIZE))
    (def end int)
    (if (== id (- gn 1))
	    (begin (= end nd))
      (begin (= end (+ start CHUNK_SIZE))))
    (def im int)
    (def ls int (aref lessStart id))
    (def ms int (aref moreStart id))
    (for ((= im start) (< im end) (inc im))
      (if (<= (aref (aref zgmid im) ncut) zlmid)
	      (begin
	        (= (aref (aref tempzgmid ls) 0) (aref (aref zgmid im) 0))
	        (= (aref (aref tempzgmid ls) 1) (aref (aref zgmid im) 1))
	        (= (aref (aref tempzgmid ls) 2) (aref (aref zgmid im) 2))
	        (inc ls))
	      (begin
	        (= (aref (aref tempzgmid ms) 0) (aref (aref zgmid im) 0))
	        (= (aref (aref tempzgmid ms) 1) (aref (aref zgmid im) 1))
	        (= (aref (aref tempzgmid ms) 2) (aref (aref zgmid im) 2))
	        (inc ms))))
    (handles setStart
      (:node 1)
      (:put from j1 to j2
	      (= this.i1 j1)
	      (= this.i2 j2)
	      (= this.ncut ncut)
	      (= this.gn gn)
	      (= this.nd nd)
        (= this.nsrt nsrt)
	      (= this.zgmid zgmid)
	      (= this.zlmid zlmid)
	      (= this.tempzgmid tempzgmid)
	      (= this.lessNum lessNum)
	      (= this.moreNum moreNum)
	      (= this.lessStart lessStart)
	      (= this.moreStart moreStart)
        (= this.ndpth ndpth))
      (:get))))

(def (ssum i1 i2 ndpth lessNum) (wfn int int int int (ptr int))
  ;;(csym::fprintf stderr "ssum: %f %d %d %d %d~%" (csym::get-wall-time) my_rank i1 i2 ndpth)
  (def id int)
  (def sum int 0)
  (do-many for id from i1 to i2
    (if (== 0 (% (- i1 id 1) Check-interval))
      TCELL-CHECK-REQ)
    (+= sum (aref lessNum id))
    (handles ssum
      (:node 1)
      (:put from j1 to j2
	      (= this.i1 j1)
	      (= this.i2 j2)
	      (= this.lessNum lessNum)
        (= this.ndpth ndpth))
      (:get
	      (+= sum this.sum))))
  (return sum))

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))

(def (csym::get-cpu-time) (fn double void)
  (return (/ (cast double (csym::clock)) CLOCKS-PER-SEC)))

(def (my-malloc) (wfn int)
  (def pos int)
  (if (< WDATA.cas-counter CASC)
    (begin
      (= pos (+ WDATA.cas-start WDATA.cas-counter))
      (inc WDATA.cas-counter)
    )
    (begin
      (= WDATA.cas-start (atomic_load (ptr CAS_CHUNK)))
      (while (not (csym::atomic_compare_exchange_weak (ptr CAS_CHUNK) (ptr WDATA.cas-start) (+ WDATA.cas-start CASC)))
        (= WDATA.cas-start (atomic_load (ptr CAS_CHUNK))))
      (= pos WDATA.cas-start)
      (= WDATA.cas-counter 1)
    )
  )
  (if (>= pos LN)
    (begin
      (csym::fprintf stderr "reach the limit for CT nodes array!~%")
      (csym::exit 99)))
  (return pos))

(def (csym::BCT_cnt) (fn void void)
  (begin
    (def i int)
    (def nlf-sum int 0)
    (for ((= i 0) (< i num-thrs) (inc i))
      (def nlf-i int (fref (aref Wdata-list i) -> nlf))
      (if (> nlf-i BCTN)
        (begin
          (csym::fprintf stderr "nlf of counted by worker %d is larger than BCTN!~%" i)
          (csym::exit 99)))
      (+= nlf-sum nlf-i))
    (csym::fprintf stderr "rank: %d, nlf-sum = %d~%" my-rank nlf-sum)
  )
)

(def (csym::load_data) (fn void void)
  (decl fname (ptr char))
  (decl file (ptr FILE))
  (def countOfNode int 0)
  (def count int 0)
  (decl i int)
  (def bi (struct bem-input))
  (decl coordOfNode (ptr (array double 3)))
  (= fname INPUT-DEFAULT)
  (= file (fopen fname "r"))
  (if (== file NULL)
    (begin
      (csym::fprintf stderr "Error: Unable to input file '%s'!~%" fname)
      (csym::exit 99))
    (begin
      (if (== (csym::read-bem-input file (ptr bi) BI-AUTO) -1)
	      (begin
	        (csym::fprintf stderr "Bem input file read error!~%")
	        (csym::exit 99)))
      (csym::print-bem-input stderr (ptr bi) BI-PRETTY)
      (= countOfNode bi.nNode)
      (= coordOfNode bi.coordOfNode)
      (= count bi.nFace)
      (= zgmid bi.coordOfFace)))
  (csym::fclose file)
  (csym::free coordOfNode)
  (= nofc count)
  (= privateCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
  (= resultCTlist (cast (ptr cluster) (csym::malloc (* (sizeof cluster) LN))))
  (= tempzgmid (cast (ptr (array double 3)) (csym::malloc (* (* nofc 3) (sizeof double)))))
)